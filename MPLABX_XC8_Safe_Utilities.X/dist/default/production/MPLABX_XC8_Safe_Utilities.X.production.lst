

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Apr 12 11:20:38 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16LF18856
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16LF18856 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  001C                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  008C                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  008E                     	;# 
   103  008F                     	;# 
   104  0090                     	;# 
   105  0090                     	;# 
   106  0091                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0110                     	;# 
   125  0110                     	;# 
   126  0111                     	;# 
   127  0112                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0114                     	;# 
   132  0115                     	;# 
   133  0116                     	;# 
   134  0116                     	;# 
   135  0117                     	;# 
   136  0119                     	;# 
   137  0119                     	;# 
   138  0119                     	;# 
   139  011A                     	;# 
   140  011A                     	;# 
   141  011A                     	;# 
   142  011B                     	;# 
   143  011B                     	;# 
   144  011B                     	;# 
   145  011B                     	;# 
   146  011B                     	;# 
   147  011C                     	;# 
   148  011C                     	;# 
   149  011C                     	;# 
   150  011D                     	;# 
   151  011D                     	;# 
   152  011D                     	;# 
   153  011E                     	;# 
   154  011E                     	;# 
   155  011E                     	;# 
   156  011F                     	;# 
   157  011F                     	;# 
   158  011F                     	;# 
   159  011F                     	;# 
   160  011F                     	;# 
   161  018C                     	;# 
   162  018D                     	;# 
   163  018E                     	;# 
   164  018F                     	;# 
   165  0190                     	;# 
   166  0191                     	;# 
   167  0192                     	;# 
   168  0196                     	;# 
   169  0197                     	;# 
   170  0198                     	;# 
   171  0199                     	;# 
   172  019A                     	;# 
   173  019B                     	;# 
   174  019C                     	;# 
   175  020C                     	;# 
   176  020C                     	;# 
   177  020D                     	;# 
   178  020E                     	;# 
   179  020F                     	;# 
   180  020F                     	;# 
   181  0210                     	;# 
   182  0210                     	;# 
   183  0211                     	;# 
   184  0211                     	;# 
   185  0212                     	;# 
   186  0212                     	;# 
   187  0213                     	;# 
   188  0214                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0216                     	;# 
   192  0216                     	;# 
   193  0217                     	;# 
   194  0217                     	;# 
   195  0218                     	;# 
   196  0218                     	;# 
   197  0219                     	;# 
   198  021A                     	;# 
   199  021B                     	;# 
   200  021B                     	;# 
   201  021C                     	;# 
   202  021C                     	;# 
   203  021D                     	;# 
   204  021D                     	;# 
   205  021E                     	;# 
   206  021F                     	;# 
   207  028C                     	;# 
   208  028C                     	;# 
   209  028D                     	;# 
   210  028D                     	;# 
   211  028E                     	;# 
   212  028F                     	;# 
   213  0290                     	;# 
   214  0290                     	;# 
   215  0291                     	;# 
   216  0292                     	;# 
   217  0292                     	;# 
   218  0293                     	;# 
   219  0293                     	;# 
   220  0294                     	;# 
   221  0295                     	;# 
   222  0296                     	;# 
   223  0296                     	;# 
   224  0297                     	;# 
   225  0298                     	;# 
   226  0298                     	;# 
   227  0299                     	;# 
   228  0299                     	;# 
   229  029A                     	;# 
   230  029B                     	;# 
   231  029C                     	;# 
   232  029C                     	;# 
   233  029D                     	;# 
   234  030C                     	;# 
   235  030C                     	;# 
   236  030D                     	;# 
   237  030E                     	;# 
   238  030F                     	;# 
   239  0310                     	;# 
   240  0310                     	;# 
   241  0311                     	;# 
   242  0312                     	;# 
   243  0313                     	;# 
   244  0314                     	;# 
   245  0314                     	;# 
   246  0315                     	;# 
   247  0316                     	;# 
   248  0317                     	;# 
   249  0318                     	;# 
   250  0318                     	;# 
   251  0319                     	;# 
   252  031A                     	;# 
   253  031B                     	;# 
   254  031C                     	;# 
   255  031C                     	;# 
   256  031D                     	;# 
   257  031E                     	;# 
   258  031F                     	;# 
   259  038C                     	;# 
   260  038C                     	;# 
   261  038D                     	;# 
   262  038E                     	;# 
   263  0390                     	;# 
   264  0390                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  040C                     	;# 
   268  040D                     	;# 
   269  040E                     	;# 
   270  040F                     	;# 
   271  0410                     	;# 
   272  0411                     	;# 
   273  0416                     	;# 
   274  0416                     	;# 
   275  0417                     	;# 
   276  0418                     	;# 
   277  0418                     	;# 
   278  0419                     	;# 
   279  041A                     	;# 
   280  041A                     	;# 
   281  041B                     	;# 
   282  041C                     	;# 
   283  041C                     	;# 
   284  041D                     	;# 
   285  041E                     	;# 
   286  041F                     	;# 
   287  048C                     	;# 
   288  048C                     	;# 
   289  048D                     	;# 
   290  048E                     	;# 
   291  048F                     	;# 
   292  048F                     	;# 
   293  0490                     	;# 
   294  0491                     	;# 
   295  0492                     	;# 
   296  0492                     	;# 
   297  0493                     	;# 
   298  0494                     	;# 
   299  0495                     	;# 
   300  0495                     	;# 
   301  0496                     	;# 
   302  0497                     	;# 
   303  0498                     	;# 
   304  0499                     	;# 
   305  049A                     	;# 
   306  049B                     	;# 
   307  049C                     	;# 
   308  049D                     	;# 
   309  050C                     	;# 
   310  050C                     	;# 
   311  050D                     	;# 
   312  050E                     	;# 
   313  050F                     	;# 
   314  050F                     	;# 
   315  0510                     	;# 
   316  0511                     	;# 
   317  0512                     	;# 
   318  0512                     	;# 
   319  0513                     	;# 
   320  0514                     	;# 
   321  0515                     	;# 
   322  0515                     	;# 
   323  0516                     	;# 
   324  0517                     	;# 
   325  0518                     	;# 
   326  0519                     	;# 
   327  051A                     	;# 
   328  051B                     	;# 
   329  051C                     	;# 
   330  051D                     	;# 
   331  058C                     	;# 
   332  058C                     	;# 
   333  058D                     	;# 
   334  058E                     	;# 
   335  058F                     	;# 
   336  058F                     	;# 
   337  0590                     	;# 
   338  0591                     	;# 
   339  0592                     	;# 
   340  0593                     	;# 
   341  060C                     	;# 
   342  060D                     	;# 
   343  060E                     	;# 
   344  060F                     	;# 
   345  0610                     	;# 
   346  0611                     	;# 
   347  0612                     	;# 
   348  0613                     	;# 
   349  0614                     	;# 
   350  0616                     	;# 
   351  0617                     	;# 
   352  0618                     	;# 
   353  0619                     	;# 
   354  061A                     	;# 
   355  061B                     	;# 
   356  061C                     	;# 
   357  061D                     	;# 
   358  061E                     	;# 
   359  068C                     	;# 
   360  068D                     	;# 
   361  068E                     	;# 
   362  068F                     	;# 
   363  0690                     	;# 
   364  0691                     	;# 
   365  0692                     	;# 
   366  0693                     	;# 
   367  0694                     	;# 
   368  070C                     	;# 
   369  070D                     	;# 
   370  070E                     	;# 
   371  070F                     	;# 
   372  0710                     	;# 
   373  0711                     	;# 
   374  0712                     	;# 
   375  0713                     	;# 
   376  0714                     	;# 
   377  0716                     	;# 
   378  0717                     	;# 
   379  0718                     	;# 
   380  0719                     	;# 
   381  071A                     	;# 
   382  071B                     	;# 
   383  071C                     	;# 
   384  071D                     	;# 
   385  071E                     	;# 
   386  0796                     	;# 
   387  0797                     	;# 
   388  0798                     	;# 
   389  0799                     	;# 
   390  079A                     	;# 
   391  079B                     	;# 
   392  080C                     	;# 
   393  080D                     	;# 
   394  080E                     	;# 
   395  080F                     	;# 
   396  0810                     	;# 
   397  0811                     	;# 
   398  0812                     	;# 
   399  0813                     	;# 
   400  0814                     	;# 
   401  081A                     	;# 
   402  081B                     	;# 
   403  081C                     	;# 
   404  081D                     	;# 
   405  081E                     	;# 
   406  081F                     	;# 
   407  088C                     	;# 
   408  088D                     	;# 
   409  088E                     	;# 
   410  088F                     	;# 
   411  0890                     	;# 
   412  0891                     	;# 
   413  0892                     	;# 
   414  0893                     	;# 
   415  0895                     	;# 
   416  0896                     	;# 
   417  0897                     	;# 
   418  0898                     	;# 
   419  0899                     	;# 
   420  089A                     	;# 
   421  089B                     	;# 
   422  090C                     	;# 
   423  090E                     	;# 
   424  090F                     	;# 
   425  091F                     	;# 
   426  098F                     	;# 
   427  098F                     	;# 
   428  0990                     	;# 
   429  0991                     	;# 
   430  0992                     	;# 
   431  0993                     	;# 
   432  0994                     	;# 
   433  0995                     	;# 
   434  0996                     	;# 
   435  0997                     	;# 
   436  0E0F                     	;# 
   437  0E10                     	;# 
   438  0E11                     	;# 
   439  0E12                     	;# 
   440  0E13                     	;# 
   441  0E14                     	;# 
   442  0E15                     	;# 
   443  0E16                     	;# 
   444  0E17                     	;# 
   445  0E18                     	;# 
   446  0E19                     	;# 
   447  0E1A                     	;# 
   448  0E1B                     	;# 
   449  0E1C                     	;# 
   450  0E1D                     	;# 
   451  0E1E                     	;# 
   452  0E1F                     	;# 
   453  0E20                     	;# 
   454  0E21                     	;# 
   455  0E22                     	;# 
   456  0E23                     	;# 
   457  0E24                     	;# 
   458  0E25                     	;# 
   459  0E26                     	;# 
   460  0E27                     	;# 
   461  0E28                     	;# 
   462  0E29                     	;# 
   463  0E2A                     	;# 
   464  0E2B                     	;# 
   465  0E2C                     	;# 
   466  0E2D                     	;# 
   467  0E2E                     	;# 
   468  0E2F                     	;# 
   469  0E30                     	;# 
   470  0E31                     	;# 
   471  0E32                     	;# 
   472  0E33                     	;# 
   473  0E34                     	;# 
   474  0E35                     	;# 
   475  0E36                     	;# 
   476  0E37                     	;# 
   477  0E8F                     	;# 
   478  0E90                     	;# 
   479  0E91                     	;# 
   480  0E92                     	;# 
   481  0E93                     	;# 
   482  0E94                     	;# 
   483  0E95                     	;# 
   484  0E96                     	;# 
   485  0E97                     	;# 
   486  0E9C                     	;# 
   487  0E9D                     	;# 
   488  0E9E                     	;# 
   489  0EA1                     	;# 
   490  0EA2                     	;# 
   491  0EA3                     	;# 
   492  0EA4                     	;# 
   493  0EA5                     	;# 
   494  0EA9                     	;# 
   495  0EAA                     	;# 
   496  0EAB                     	;# 
   497  0EAC                     	;# 
   498  0EB1                     	;# 
   499  0EB2                     	;# 
   500  0EB3                     	;# 
   501  0EB8                     	;# 
   502  0EB9                     	;# 
   503  0EBA                     	;# 
   504  0EBB                     	;# 
   505  0EBC                     	;# 
   506  0EBD                     	;# 
   507  0EBE                     	;# 
   508  0EC3                     	;# 
   509  0EC5                     	;# 
   510  0EC6                     	;# 
   511  0EC7                     	;# 
   512  0EC8                     	;# 
   513  0EC9                     	;# 
   514  0ECA                     	;# 
   515  0ECB                     	;# 
   516  0ECC                     	;# 
   517  0F10                     	;# 
   518  0F11                     	;# 
   519  0F12                     	;# 
   520  0F13                     	;# 
   521  0F14                     	;# 
   522  0F15                     	;# 
   523  0F16                     	;# 
   524  0F17                     	;# 
   525  0F18                     	;# 
   526  0F19                     	;# 
   527  0F1A                     	;# 
   528  0F1B                     	;# 
   529  0F1C                     	;# 
   530  0F1D                     	;# 
   531  0F1E                     	;# 
   532  0F1F                     	;# 
   533  0F20                     	;# 
   534  0F21                     	;# 
   535  0F22                     	;# 
   536  0F23                     	;# 
   537  0F24                     	;# 
   538  0F25                     	;# 
   539  0F26                     	;# 
   540  0F27                     	;# 
   541  0F38                     	;# 
   542  0F39                     	;# 
   543  0F3A                     	;# 
   544  0F3B                     	;# 
   545  0F3C                     	;# 
   546  0F3D                     	;# 
   547  0F3E                     	;# 
   548  0F3F                     	;# 
   549  0F40                     	;# 
   550  0F41                     	;# 
   551  0F43                     	;# 
   552  0F44                     	;# 
   553  0F45                     	;# 
   554  0F46                     	;# 
   555  0F47                     	;# 
   556  0F48                     	;# 
   557  0F49                     	;# 
   558  0F4A                     	;# 
   559  0F4B                     	;# 
   560  0F4C                     	;# 
   561  0F4E                     	;# 
   562  0F4F                     	;# 
   563  0F50                     	;# 
   564  0F51                     	;# 
   565  0F52                     	;# 
   566  0F53                     	;# 
   567  0F54                     	;# 
   568  0F55                     	;# 
   569  0F56                     	;# 
   570  0F57                     	;# 
   571  0F65                     	;# 
   572  0F68                     	;# 
   573  0F69                     	;# 
   574  0F6A                     	;# 
   575  0F6B                     	;# 
   576  0FE4                     	;# 
   577  0FE5                     	;# 
   578  0FE6                     	;# 
   579  0FE7                     	;# 
   580  0FE8                     	;# 
   581  0FE9                     	;# 
   582  0FEA                     	;# 
   583  0FEB                     	;# 
   584  0FED                     	;# 
   585  0FEE                     	;# 
   586  0FEF                     	;# 
   587  0000                     	;# 
   588  0001                     	;# 
   589  0002                     	;# 
   590  0003                     	;# 
   591  0004                     	;# 
   592  0005                     	;# 
   593  0006                     	;# 
   594  0007                     	;# 
   595  0008                     	;# 
   596  0009                     	;# 
   597  000A                     	;# 
   598  000B                     	;# 
   599  000C                     	;# 
   600  000D                     	;# 
   601  000E                     	;# 
   602  0010                     	;# 
   603  0011                     	;# 
   604  0012                     	;# 
   605  0013                     	;# 
   606  0016                     	;# 
   607  0017                     	;# 
   608  0018                     	;# 
   609  001C                     	;# 
   610  001C                     	;# 
   611  001D                     	;# 
   612  001D                     	;# 
   613  001E                     	;# 
   614  001F                     	;# 
   615  008C                     	;# 
   616  008C                     	;# 
   617  008D                     	;# 
   618  008E                     	;# 
   619  008E                     	;# 
   620  008F                     	;# 
   621  0090                     	;# 
   622  0090                     	;# 
   623  0091                     	;# 
   624  0093                     	;# 
   625  0094                     	;# 
   626  0095                     	;# 
   627  0096                     	;# 
   628  0097                     	;# 
   629  0098                     	;# 
   630  0099                     	;# 
   631  009A                     	;# 
   632  009B                     	;# 
   633  009C                     	;# 
   634  009D                     	;# 
   635  009E                     	;# 
   636  010C                     	;# 
   637  010D                     	;# 
   638  010E                     	;# 
   639  010E                     	;# 
   640  010F                     	;# 
   641  0110                     	;# 
   642  0110                     	;# 
   643  0111                     	;# 
   644  0112                     	;# 
   645  0112                     	;# 
   646  0113                     	;# 
   647  0114                     	;# 
   648  0114                     	;# 
   649  0115                     	;# 
   650  0116                     	;# 
   651  0116                     	;# 
   652  0117                     	;# 
   653  0119                     	;# 
   654  0119                     	;# 
   655  0119                     	;# 
   656  011A                     	;# 
   657  011A                     	;# 
   658  011A                     	;# 
   659  011B                     	;# 
   660  011B                     	;# 
   661  011B                     	;# 
   662  011B                     	;# 
   663  011B                     	;# 
   664  011C                     	;# 
   665  011C                     	;# 
   666  011C                     	;# 
   667  011D                     	;# 
   668  011D                     	;# 
   669  011D                     	;# 
   670  011E                     	;# 
   671  011E                     	;# 
   672  011E                     	;# 
   673  011F                     	;# 
   674  011F                     	;# 
   675  011F                     	;# 
   676  011F                     	;# 
   677  011F                     	;# 
   678  018C                     	;# 
   679  018D                     	;# 
   680  018E                     	;# 
   681  018F                     	;# 
   682  0190                     	;# 
   683  0191                     	;# 
   684  0192                     	;# 
   685  0196                     	;# 
   686  0197                     	;# 
   687  0198                     	;# 
   688  0199                     	;# 
   689  019A                     	;# 
   690  019B                     	;# 
   691  019C                     	;# 
   692  020C                     	;# 
   693  020C                     	;# 
   694  020D                     	;# 
   695  020E                     	;# 
   696  020F                     	;# 
   697  020F                     	;# 
   698  0210                     	;# 
   699  0210                     	;# 
   700  0211                     	;# 
   701  0211                     	;# 
   702  0212                     	;# 
   703  0212                     	;# 
   704  0213                     	;# 
   705  0214                     	;# 
   706  0215                     	;# 
   707  0215                     	;# 
   708  0216                     	;# 
   709  0216                     	;# 
   710  0217                     	;# 
   711  0217                     	;# 
   712  0218                     	;# 
   713  0218                     	;# 
   714  0219                     	;# 
   715  021A                     	;# 
   716  021B                     	;# 
   717  021B                     	;# 
   718  021C                     	;# 
   719  021C                     	;# 
   720  021D                     	;# 
   721  021D                     	;# 
   722  021E                     	;# 
   723  021F                     	;# 
   724  028C                     	;# 
   725  028C                     	;# 
   726  028D                     	;# 
   727  028D                     	;# 
   728  028E                     	;# 
   729  028F                     	;# 
   730  0290                     	;# 
   731  0290                     	;# 
   732  0291                     	;# 
   733  0292                     	;# 
   734  0292                     	;# 
   735  0293                     	;# 
   736  0293                     	;# 
   737  0294                     	;# 
   738  0295                     	;# 
   739  0296                     	;# 
   740  0296                     	;# 
   741  0297                     	;# 
   742  0298                     	;# 
   743  0298                     	;# 
   744  0299                     	;# 
   745  0299                     	;# 
   746  029A                     	;# 
   747  029B                     	;# 
   748  029C                     	;# 
   749  029C                     	;# 
   750  029D                     	;# 
   751  030C                     	;# 
   752  030C                     	;# 
   753  030D                     	;# 
   754  030E                     	;# 
   755  030F                     	;# 
   756  0310                     	;# 
   757  0310                     	;# 
   758  0311                     	;# 
   759  0312                     	;# 
   760  0313                     	;# 
   761  0314                     	;# 
   762  0314                     	;# 
   763  0315                     	;# 
   764  0316                     	;# 
   765  0317                     	;# 
   766  0318                     	;# 
   767  0318                     	;# 
   768  0319                     	;# 
   769  031A                     	;# 
   770  031B                     	;# 
   771  031C                     	;# 
   772  031C                     	;# 
   773  031D                     	;# 
   774  031E                     	;# 
   775  031F                     	;# 
   776  038C                     	;# 
   777  038C                     	;# 
   778  038D                     	;# 
   779  038E                     	;# 
   780  0390                     	;# 
   781  0390                     	;# 
   782  0391                     	;# 
   783  0392                     	;# 
   784  040C                     	;# 
   785  040D                     	;# 
   786  040E                     	;# 
   787  040F                     	;# 
   788  0410                     	;# 
   789  0411                     	;# 
   790  0416                     	;# 
   791  0416                     	;# 
   792  0417                     	;# 
   793  0418                     	;# 
   794  0418                     	;# 
   795  0419                     	;# 
   796  041A                     	;# 
   797  041A                     	;# 
   798  041B                     	;# 
   799  041C                     	;# 
   800  041C                     	;# 
   801  041D                     	;# 
   802  041E                     	;# 
   803  041F                     	;# 
   804  048C                     	;# 
   805  048C                     	;# 
   806  048D                     	;# 
   807  048E                     	;# 
   808  048F                     	;# 
   809  048F                     	;# 
   810  0490                     	;# 
   811  0491                     	;# 
   812  0492                     	;# 
   813  0492                     	;# 
   814  0493                     	;# 
   815  0494                     	;# 
   816  0495                     	;# 
   817  0495                     	;# 
   818  0496                     	;# 
   819  0497                     	;# 
   820  0498                     	;# 
   821  0499                     	;# 
   822  049A                     	;# 
   823  049B                     	;# 
   824  049C                     	;# 
   825  049D                     	;# 
   826  050C                     	;# 
   827  050C                     	;# 
   828  050D                     	;# 
   829  050E                     	;# 
   830  050F                     	;# 
   831  050F                     	;# 
   832  0510                     	;# 
   833  0511                     	;# 
   834  0512                     	;# 
   835  0512                     	;# 
   836  0513                     	;# 
   837  0514                     	;# 
   838  0515                     	;# 
   839  0515                     	;# 
   840  0516                     	;# 
   841  0517                     	;# 
   842  0518                     	;# 
   843  0519                     	;# 
   844  051A                     	;# 
   845  051B                     	;# 
   846  051C                     	;# 
   847  051D                     	;# 
   848  058C                     	;# 
   849  058C                     	;# 
   850  058D                     	;# 
   851  058E                     	;# 
   852  058F                     	;# 
   853  058F                     	;# 
   854  0590                     	;# 
   855  0591                     	;# 
   856  0592                     	;# 
   857  0593                     	;# 
   858  060C                     	;# 
   859  060D                     	;# 
   860  060E                     	;# 
   861  060F                     	;# 
   862  0610                     	;# 
   863  0611                     	;# 
   864  0612                     	;# 
   865  0613                     	;# 
   866  0614                     	;# 
   867  0616                     	;# 
   868  0617                     	;# 
   869  0618                     	;# 
   870  0619                     	;# 
   871  061A                     	;# 
   872  061B                     	;# 
   873  061C                     	;# 
   874  061D                     	;# 
   875  061E                     	;# 
   876  068C                     	;# 
   877  068D                     	;# 
   878  068E                     	;# 
   879  068F                     	;# 
   880  0690                     	;# 
   881  0691                     	;# 
   882  0692                     	;# 
   883  0693                     	;# 
   884  0694                     	;# 
   885  070C                     	;# 
   886  070D                     	;# 
   887  070E                     	;# 
   888  070F                     	;# 
   889  0710                     	;# 
   890  0711                     	;# 
   891  0712                     	;# 
   892  0713                     	;# 
   893  0714                     	;# 
   894  0716                     	;# 
   895  0717                     	;# 
   896  0718                     	;# 
   897  0719                     	;# 
   898  071A                     	;# 
   899  071B                     	;# 
   900  071C                     	;# 
   901  071D                     	;# 
   902  071E                     	;# 
   903  0796                     	;# 
   904  0797                     	;# 
   905  0798                     	;# 
   906  0799                     	;# 
   907  079A                     	;# 
   908  079B                     	;# 
   909  080C                     	;# 
   910  080D                     	;# 
   911  080E                     	;# 
   912  080F                     	;# 
   913  0810                     	;# 
   914  0811                     	;# 
   915  0812                     	;# 
   916  0813                     	;# 
   917  0814                     	;# 
   918  081A                     	;# 
   919  081B                     	;# 
   920  081C                     	;# 
   921  081D                     	;# 
   922  081E                     	;# 
   923  081F                     	;# 
   924  088C                     	;# 
   925  088D                     	;# 
   926  088E                     	;# 
   927  088F                     	;# 
   928  0890                     	;# 
   929  0891                     	;# 
   930  0892                     	;# 
   931  0893                     	;# 
   932  0895                     	;# 
   933  0896                     	;# 
   934  0897                     	;# 
   935  0898                     	;# 
   936  0899                     	;# 
   937  089A                     	;# 
   938  089B                     	;# 
   939  090C                     	;# 
   940  090E                     	;# 
   941  090F                     	;# 
   942  091F                     	;# 
   943  098F                     	;# 
   944  098F                     	;# 
   945  0990                     	;# 
   946  0991                     	;# 
   947  0992                     	;# 
   948  0993                     	;# 
   949  0994                     	;# 
   950  0995                     	;# 
   951  0996                     	;# 
   952  0997                     	;# 
   953  0E0F                     	;# 
   954  0E10                     	;# 
   955  0E11                     	;# 
   956  0E12                     	;# 
   957  0E13                     	;# 
   958  0E14                     	;# 
   959  0E15                     	;# 
   960  0E16                     	;# 
   961  0E17                     	;# 
   962  0E18                     	;# 
   963  0E19                     	;# 
   964  0E1A                     	;# 
   965  0E1B                     	;# 
   966  0E1C                     	;# 
   967  0E1D                     	;# 
   968  0E1E                     	;# 
   969  0E1F                     	;# 
   970  0E20                     	;# 
   971  0E21                     	;# 
   972  0E22                     	;# 
   973  0E23                     	;# 
   974  0E24                     	;# 
   975  0E25                     	;# 
   976  0E26                     	;# 
   977  0E27                     	;# 
   978  0E28                     	;# 
   979  0E29                     	;# 
   980  0E2A                     	;# 
   981  0E2B                     	;# 
   982  0E2C                     	;# 
   983  0E2D                     	;# 
   984  0E2E                     	;# 
   985  0E2F                     	;# 
   986  0E30                     	;# 
   987  0E31                     	;# 
   988  0E32                     	;# 
   989  0E33                     	;# 
   990  0E34                     	;# 
   991  0E35                     	;# 
   992  0E36                     	;# 
   993  0E37                     	;# 
   994  0E8F                     	;# 
   995  0E90                     	;# 
   996  0E91                     	;# 
   997  0E92                     	;# 
   998  0E93                     	;# 
   999  0E94                     	;# 
  1000  0E95                     	;# 
  1001  0E96                     	;# 
  1002  0E97                     	;# 
  1003  0E9C                     	;# 
  1004  0E9D                     	;# 
  1005  0E9E                     	;# 
  1006  0EA1                     	;# 
  1007  0EA2                     	;# 
  1008  0EA3                     	;# 
  1009  0EA4                     	;# 
  1010  0EA5                     	;# 
  1011  0EA9                     	;# 
  1012  0EAA                     	;# 
  1013  0EAB                     	;# 
  1014  0EAC                     	;# 
  1015  0EB1                     	;# 
  1016  0EB2                     	;# 
  1017  0EB3                     	;# 
  1018  0EB8                     	;# 
  1019  0EB9                     	;# 
  1020  0EBA                     	;# 
  1021  0EBB                     	;# 
  1022  0EBC                     	;# 
  1023  0EBD                     	;# 
  1024  0EBE                     	;# 
  1025  0EC3                     	;# 
  1026  0EC5                     	;# 
  1027  0EC6                     	;# 
  1028  0EC7                     	;# 
  1029  0EC8                     	;# 
  1030  0EC9                     	;# 
  1031  0ECA                     	;# 
  1032  0ECB                     	;# 
  1033  0ECC                     	;# 
  1034  0F10                     	;# 
  1035  0F11                     	;# 
  1036  0F12                     	;# 
  1037  0F13                     	;# 
  1038  0F14                     	;# 
  1039  0F15                     	;# 
  1040  0F16                     	;# 
  1041  0F17                     	;# 
  1042  0F18                     	;# 
  1043  0F19                     	;# 
  1044  0F1A                     	;# 
  1045  0F1B                     	;# 
  1046  0F1C                     	;# 
  1047  0F1D                     	;# 
  1048  0F1E                     	;# 
  1049  0F1F                     	;# 
  1050  0F20                     	;# 
  1051  0F21                     	;# 
  1052  0F22                     	;# 
  1053  0F23                     	;# 
  1054  0F24                     	;# 
  1055  0F25                     	;# 
  1056  0F26                     	;# 
  1057  0F27                     	;# 
  1058  0F38                     	;# 
  1059  0F39                     	;# 
  1060  0F3A                     	;# 
  1061  0F3B                     	;# 
  1062  0F3C                     	;# 
  1063  0F3D                     	;# 
  1064  0F3E                     	;# 
  1065  0F3F                     	;# 
  1066  0F40                     	;# 
  1067  0F41                     	;# 
  1068  0F43                     	;# 
  1069  0F44                     	;# 
  1070  0F45                     	;# 
  1071  0F46                     	;# 
  1072  0F47                     	;# 
  1073  0F48                     	;# 
  1074  0F49                     	;# 
  1075  0F4A                     	;# 
  1076  0F4B                     	;# 
  1077  0F4C                     	;# 
  1078  0F4E                     	;# 
  1079  0F4F                     	;# 
  1080  0F50                     	;# 
  1081  0F51                     	;# 
  1082  0F52                     	;# 
  1083  0F53                     	;# 
  1084  0F54                     	;# 
  1085  0F55                     	;# 
  1086  0F56                     	;# 
  1087  0F57                     	;# 
  1088  0F65                     	;# 
  1089  0F68                     	;# 
  1090  0F69                     	;# 
  1091  0F6A                     	;# 
  1092  0F6B                     	;# 
  1093  0FE4                     	;# 
  1094  0FE5                     	;# 
  1095  0FE6                     	;# 
  1096  0FE7                     	;# 
  1097  0FE8                     	;# 
  1098  0FE9                     	;# 
  1099  0FEA                     	;# 
  1100  0FEB                     	;# 
  1101  0FED                     	;# 
  1102  0FEE                     	;# 
  1103  0FEF                     	;# 
  1104                           
  1105                           	psect	stringtext1
  1106  0800                     __pstringtext1:
  1107  0800                     main@msg:
  1108  0800  3454               	retlw	84
  1109  0801  3468               	retlw	104
  1110  0802  3465               	retlw	101
  1111  0803  3420               	retlw	32
  1112  0804  3471               	retlw	113
  1113  0805  3475               	retlw	117
  1114  0806  3469               	retlw	105
  1115  0807  3463               	retlw	99
  1116  0808  346B               	retlw	107
  1117  0809  3420               	retlw	32
  1118  080A  3462               	retlw	98
  1119  080B  3472               	retlw	114
  1120  080C  346F               	retlw	111
  1121  080D  3477               	retlw	119
  1122  080E  346E               	retlw	110
  1123  080F  3420               	retlw	32
  1124  0810  3466               	retlw	102
  1125  0811  346F               	retlw	111
  1126  0812  3478               	retlw	120
  1127  0813  3400               	retlw	0
  1128  0814                     __end_ofmain@msg:
  1129  0814                     STR_1:
  1130  0814  3425               	retlw	37	;'%'
  1131  0815  3438               	retlw	56	;'8'
  1132  0816  3464               	retlw	100	;'d'
  1133  0817  3420               	retlw	32	;' '
  1134  0818  3425               	retlw	37	;'%'
  1135  0819  3438               	retlw	56	;'8'
  1136  081A  3464               	retlw	100	;'d'
  1137  081B  3420               	retlw	32	;' '
  1138  081C  3425               	retlw	37	;'%'
  1139  081D  3438               	retlw	56	;'8'
  1140  081E  3464               	retlw	100	;'d'
  1141  081F  3420               	retlw	32	;' '
  1142  0820  3425               	retlw	37	;'%'
  1143  0821  3438               	retlw	56	;'8'
  1144  0822  3464               	retlw	100	;'d'
  1145  0823  3400               	retlw	0
  1146                           
  1147                           	psect	stringtext2
  1148  0824                     __pstringtext2:
  1149  0824                     STR_7:
  1150  0824  3425               	retlw	37	;'%'
  1151  0825  3432               	retlw	50	;'2'
  1152  0826  3464               	retlw	100	;'d'
  1153  0827  3400               	retlw	0
  1154                           
  1155                           	psect	stringtext3
  1156  0828                     __pstringtext3:
  1157  0828                     STR_6:
  1158  0828  3425               	retlw	37	;'%'
  1159  0829  3436               	retlw	54	;'6'
  1160  082A  3464               	retlw	100	;'d'
  1161  082B  3400               	retlw	0
  1162                           
  1163                           	psect	stringtext4
  1164  082C                     __pstringtext4:
  1165  082C                     STR_8:
  1166  082C  3425               	retlw	37	;'%'
  1167  082D  3434               	retlw	52	;'4'
  1168  082E  3478               	retlw	120	;'x'
  1169  082F  3400               	retlw	0
  1170                           
  1171                           	psect	stringtext5
  1172  0830                     __pstringtext5:
  1173  0830                     STR_4:
  1174  0830  3425               	retlw	37	;'%'
  1175  0831  3464               	retlw	100	;'d'
  1176  0832  3400               	retlw	0
  1177                           
  1178                           	psect	stringtext6
  1179  0833                     __pstringtext6:
  1180  0833                     STR_9:
  1181  0833  3425               	retlw	37	;'%'
  1182  0834  3470               	retlw	112	;'p'
  1183  0835  3400               	retlw	0
  1184                           
  1185                           	psect	stringtext7
  1186  0000                     __pstringtext7:
  1187  0820                     
  1188                           	psect	cinit
  1189  07F5                     start_initialization:	
  1190                           ; #config settings
  1191                           
  1192  07F5                     __initialization:
  1193                           
  1194                           ; Clear objects allocated to BANK4
  1195  07F5  3020               	movlw	low __pbssBANK4
  1196  07F6  0084               	movwf	4
  1197  07F7  3002               	movlw	high __pbssBANK4
  1198  07F8  0085               	movwf	5
  1199  07F9  3040               	movlw	64
  1200  07FA  3182  22E8  3187   	fcall	clear_ram0
  1201  07FD                     end_of_initialization:	
  1202                           ;End of C runtime variable initialization code
  1203                           
  1204  07FD                     __end_of__initialization:
  1205  07FD  0020               	movlb	0
  1206  07FE  3185  2D53         	ljmp	_main	;jump to C main() function
  1207                           
  1208                           	psect	bssBANK4
  1209  0220                     __pbssBANK4:
  1210  0220                     main@F11549:
  1211  0220                     	ds	64
  1212                           
  1213                           	psect	clrtext
  1214  02E8                     clear_ram0:	
  1215                           ;	Called with FSR0 containing the base address, and
  1216                           ;	WREG with the size to clear
  1217                           
  1218  02E8  0064               	clrwdt	;clear the watchdog before getting into this loop
  1219  02E9                     clrloop0:
  1220  02E9  0180               	clrf	0	;clear RAM location pointed to by FSR
  1221  02EA  3101               	addfsr 0,1
  1222  02EB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1223  02EC  2AE9               	goto	clrloop0	;have we reached the end yet?
  1224  02ED  3400               	retlw	0	;all done for this memory range, return
  1225                           
  1226                           	psect	cstackBANK3
  1227  01A0                     __pcstackBANK3:
  1228  01A0                     main@my_string:
  1229                           
  1230                           ; 64 bytes @ 0x0
  1231  01A0                     	ds	64
  1232                           
  1233                           	psect	cstackBANK2
  1234  0120                     __pcstackBANK2:
  1235  0120                     main@exp_msg:
  1236                           
  1237                           ; 64 bytes @ 0x0
  1238  0120                     	ds	64
  1239                           
  1240                           	psect	cstackBANK1
  1241  00A0                     __pcstackBANK1:
  1242  00A0                     main@comp_msg:
  1243                           
  1244                           ; 64 bytes @ 0x0
  1245  00A0                     	ds	64
  1246                           
  1247                           	psect	cstackCOMMON
  1248  0070                     __pcstackCOMMON:
  1249  0070                     ?_safe_compress:
  1250  0070                     ?_safe_uncompress:	
  1251                           ; 1 bytes @ 0x0
  1252                           
  1253  0070                     ?_safe_string_compare:	
  1254                           ; 1 bytes @ 0x0
  1255                           
  1256  0070                     ?___bmul:	
  1257                           ; 1 bytes @ 0x0
  1258                           
  1259  0070                     ?_safe_string_length:	
  1260                           ; 1 bytes @ 0x0
  1261                           
  1262  0070                     ?_main:	
  1263                           ; 2 bytes @ 0x0
  1264                           
  1265  0070                     ?___wmul:	
  1266                           ; 2 bytes @ 0x0
  1267                           
  1268  0070                     ?___awmod:	
  1269                           ; 2 bytes @ 0x0
  1270                           
  1271  0070                     safe_uncompress@anArray:	
  1272                           ; 2 bytes @ 0x0
  1273                           
  1274  0070                     ___bmul@multiplicand:	
  1275                           ; 1 bytes @ 0x0
  1276                           
  1277  0070                     safe_compress@aString1:	
  1278                           ; 1 bytes @ 0x0
  1279                           
  1280  0070                     safe_string_length@aString:	
  1281                           ; 2 bytes @ 0x0
  1282                           
  1283  0070                     safe_string_compare@aString1:	
  1284                           ; 2 bytes @ 0x0
  1285                           
  1286  0070                     ___wmul@multiplier:	
  1287                           ; 2 bytes @ 0x0
  1288                           
  1289  0070                     ___awmod@divisor:	
  1290                           ; 2 bytes @ 0x0
  1291                           
  1292                           
  1293                           ; 2 bytes @ 0x0
  1294  0070                     	ds	1
  1295  0071                     ??___bmul:
  1296  0071                     safe_uncompress@arraySize:	
  1297                           ; 1 bytes @ 0x1
  1298                           
  1299                           
  1300                           ; 2 bytes @ 0x1
  1301  0071                     	ds	1
  1302  0072                     ??_safe_string_length:
  1303  0072                     ??_safe_compress:	
  1304                           ; 1 bytes @ 0x2
  1305                           
  1306  0072                     safe_compress@anArray1:	
  1307                           ; 1 bytes @ 0x2
  1308                           
  1309  0072                     safe_string_compare@aString2:	
  1310                           ; 1 bytes @ 0x2
  1311                           
  1312  0072                     ___bmul@product:	
  1313                           ; 1 bytes @ 0x2
  1314                           
  1315  0072                     ___wmul@multiplicand:	
  1316                           ; 1 bytes @ 0x2
  1317                           
  1318  0072                     ___awmod@dividend:	
  1319                           ; 2 bytes @ 0x2
  1320                           
  1321                           
  1322                           ; 2 bytes @ 0x2
  1323  0072                     	ds	1
  1324  0073                     ??_safe_uncompress:
  1325  0073                     safe_uncompress@aString:	
  1326                           ; 1 bytes @ 0x3
  1327                           
  1328  0073                     ___bmul@multiplier:	
  1329                           ; 1 bytes @ 0x3
  1330                           
  1331  0073                     safe_string_length@n:	
  1332                           ; 1 bytes @ 0x3
  1333                           
  1334  0073                     safe_string_compare@max_chars:	
  1335                           ; 2 bytes @ 0x3
  1336                           
  1337                           
  1338                           ; 2 bytes @ 0x3
  1339  0073                     	ds	1
  1340  0074                     ??___wmul:
  1341  0074                     ??___awmod:	
  1342                           ; 1 bytes @ 0x4
  1343                           
  1344  0074                     ___wmul@product:	
  1345                           ; 1 bytes @ 0x4
  1346                           
  1347                           
  1348                           ; 2 bytes @ 0x4
  1349  0074                     	ds	1
  1350  0075                     ??_safe_string_compare:
  1351  0075                     ___awmod@counter:	
  1352                           ; 1 bytes @ 0x5
  1353                           
  1354                           
  1355                           ; 1 bytes @ 0x5
  1356  0075                     	ds	1
  1357  0076                     ?___awdiv:
  1358  0076                     safe_string_compare@loop:	
  1359                           ; 2 bytes @ 0x6
  1360                           
  1361  0076                     ___awmod@sign:	
  1362                           ; 1 bytes @ 0x6
  1363                           
  1364  0076                     ___awdiv@divisor:	
  1365                           ; 1 bytes @ 0x6
  1366                           
  1367                           
  1368                           ; 2 bytes @ 0x6
  1369  0076                     	ds	1
  1370  0077                     safe_string_compare@i:
  1371                           
  1372                           ; 2 bytes @ 0x7
  1373  0077                     	ds	1
  1374  0078                     ___awdiv@dividend:
  1375                           
  1376                           ; 2 bytes @ 0x8
  1377  0078                     	ds	2
  1378  007A                     ??___awdiv:
  1379                           
  1380                           ; 1 bytes @ 0xA
  1381  007A                     	ds	1
  1382  007B                     ??_safe_int_to_dec:
  1383                           
  1384                           ; 1 bytes @ 0xB
  1385  007B                     	ds	2
  1386  007D                     ??_safe_sprintf4:
  1387  007D                     ??_safe_sprintf3:	
  1388                           ; 1 bytes @ 0xD
  1389                           
  1390  007D                     ??_safe_sprintf2:	
  1391                           ; 1 bytes @ 0xD
  1392                           
  1393  007D                     ??_safe_sprintf1:	
  1394                           ; 1 bytes @ 0xD
  1395                           
  1396  007D                     safe_sprintf1@str1:	
  1397                           ; 1 bytes @ 0xD
  1398                           
  1399  007D                     safe_sprintf2@str2:	
  1400                           ; 1 bytes @ 0xD
  1401                           
  1402  007D                     safe_sprintf3@str3:	
  1403                           ; 1 bytes @ 0xD
  1404                           
  1405  007D                     safe_sprintf4@str4:	
  1406                           ; 1 bytes @ 0xD
  1407                           
  1408                           
  1409                           ; 1 bytes @ 0xD
  1410  007D                     	ds	1
  1411                           
  1412                           	psect	cstackBANK0
  1413  0020                     __pcstackBANK0:
  1414  0020                     ___awdiv@counter:
  1415                           
  1416                           ; 1 bytes @ 0x0
  1417  0020                     	ds	1
  1418  0021                     ___awdiv@sign:
  1419                           
  1420                           ; 1 bytes @ 0x1
  1421  0021                     	ds	1
  1422  0022                     ___awdiv@quotient:
  1423                           
  1424                           ; 2 bytes @ 0x2
  1425  0022                     	ds	2
  1426  0024                     ?_safe_int_to_dec:
  1427  0024                     safe_int_to_dec@offset:	
  1428                           ; 1 bytes @ 0x4
  1429                           
  1430                           
  1431                           ; 2 bytes @ 0x4
  1432  0024                     	ds	2
  1433  0026                     safe_int_to_dec@aValue:
  1434                           
  1435                           ; 2 bytes @ 0x6
  1436  0026                     	ds	2
  1437  0028                     safe_int_to_dec@remainder:
  1438                           
  1439                           ; 2 bytes @ 0x8
  1440  0028                     	ds	2
  1441  002A                     safe_int_to_dec@status1:
  1442                           
  1443                           ; 1 bytes @ 0xA
  1444  002A                     	ds	1
  1445  002B                     safe_int_to_dec@neg:
  1446                           
  1447                           ; 1 bytes @ 0xB
  1448  002B                     	ds	1
  1449  002C                     safe_int_to_dec@index:
  1450                           
  1451                           ; 2 bytes @ 0xC
  1452  002C                     	ds	2
  1453  002E                     safe_int_to_dec@string1:
  1454                           
  1455                           ; 1 bytes @ 0xE
  1456  002E                     	ds	1
  1457  002F                     safe_int_to_dec@value:
  1458                           
  1459                           ; 2 bytes @ 0xF
  1460  002F                     	ds	2
  1461  0031                     ?_safe_sprintf:
  1462  0031                     safe_sprintf@format:	
  1463                           ; 1 bytes @ 0x11
  1464                           
  1465                           
  1466                           ; 2 bytes @ 0x11
  1467  0031                     	ds	2
  1468  0033                     safe_sprintf@aCount:
  1469                           
  1470                           ; 2 bytes @ 0x13
  1471  0033                     	ds	2
  1472  0035                     safe_sprintf@d1:
  1473                           
  1474                           ; 2 bytes @ 0x15
  1475  0035                     	ds	2
  1476  0037                     safe_sprintf@d2:
  1477                           
  1478                           ; 2 bytes @ 0x17
  1479  0037                     	ds	2
  1480  0039                     safe_sprintf@d3:
  1481                           
  1482                           ; 2 bytes @ 0x19
  1483  0039                     	ds	2
  1484  003B                     safe_sprintf@d4:
  1485                           
  1486                           ; 2 bytes @ 0x1B
  1487  003B                     	ds	2
  1488  003D                     ??_safe_sprintf:
  1489                           
  1490                           ; 1 bytes @ 0x1D
  1491  003D                     	ds	5
  1492  0042                     safe_sprintf@digit:
  1493                           
  1494                           ; 8 bytes @ 0x22
  1495  0042                     	ds	8
  1496  004A                     safe_sprintf@max:
  1497                           
  1498                           ; 2 bytes @ 0x2A
  1499  004A                     	ds	2
  1500  004C                     safe_sprintf@digits:
  1501                           
  1502                           ; 2 bytes @ 0x2C
  1503  004C                     	ds	2
  1504  004E                     safe_sprintf@status2:
  1505                           
  1506                           ; 1 bytes @ 0x2E
  1507  004E                     	ds	1
  1508  004F                     safe_sprintf@count:
  1509                           
  1510                           ; 2 bytes @ 0x2F
  1511  004F                     	ds	2
  1512  0051                     safe_sprintf@width:
  1513                           
  1514                           ; 2 bytes @ 0x31
  1515  0051                     	ds	2
  1516  0053                     safe_sprintf@istr:
  1517                           
  1518                           ; 2 bytes @ 0x33
  1519  0053                     	ds	2
  1520  0055                     safe_sprintf@ifmt:
  1521                           
  1522                           ; 2 bytes @ 0x35
  1523  0055                     	ds	2
  1524  0057                     safe_sprintf@string:
  1525                           
  1526                           ; 1 bytes @ 0x37
  1527  0057                     	ds	1
  1528  0058                     ?_safe_sprintf4:
  1529  0058                     ?_safe_sprintf3:	
  1530                           ; 1 bytes @ 0x38
  1531                           
  1532  0058                     ?_safe_sprintf2:	
  1533                           ; 1 bytes @ 0x38
  1534                           
  1535  0058                     ?_safe_sprintf1:	
  1536                           ; 1 bytes @ 0x38
  1537                           
  1538  0058                     safe_sprintf1@format1:	
  1539                           ; 1 bytes @ 0x38
  1540                           
  1541  0058                     safe_sprintf2@format2:	
  1542                           ; 2 bytes @ 0x38
  1543                           
  1544  0058                     safe_sprintf3@format3:	
  1545                           ; 2 bytes @ 0x38
  1546                           
  1547  0058                     safe_sprintf4@format4:	
  1548                           ; 2 bytes @ 0x38
  1549                           
  1550                           
  1551                           ; 2 bytes @ 0x38
  1552  0058                     	ds	2
  1553  005A                     safe_sprintf1@d11:
  1554  005A                     safe_sprintf2@d12:	
  1555                           ; 2 bytes @ 0x3A
  1556                           
  1557  005A                     safe_sprintf3@d13:	
  1558                           ; 2 bytes @ 0x3A
  1559                           
  1560  005A                     safe_sprintf4@d14:	
  1561                           ; 2 bytes @ 0x3A
  1562                           
  1563                           
  1564                           ; 2 bytes @ 0x3A
  1565  005A                     	ds	2
  1566  005C                     safe_sprintf2@d22:
  1567  005C                     safe_sprintf3@d23:	
  1568                           ; 2 bytes @ 0x3C
  1569                           
  1570  005C                     safe_sprintf4@d24:	
  1571                           ; 2 bytes @ 0x3C
  1572                           
  1573                           
  1574                           ; 2 bytes @ 0x3C
  1575  005C                     	ds	2
  1576  005E                     safe_sprintf3@d33:
  1577  005E                     safe_sprintf4@d34:	
  1578                           ; 2 bytes @ 0x3E
  1579                           
  1580                           
  1581                           ; 2 bytes @ 0x3E
  1582  005E                     	ds	2
  1583  0060                     safe_sprintf4@d44:
  1584                           
  1585                           ; 2 bytes @ 0x40
  1586  0060                     	ds	2
  1587  0062                     ??_main:
  1588                           
  1589                           ; 1 bytes @ 0x42
  1590  0062                     	ds	1
  1591  0063                     main@len_msg:
  1592                           
  1593                           ; 2 bytes @ 0x43
  1594  0063                     	ds	2
  1595  0065                     main@len_comp_msg:
  1596                           
  1597                           ; 2 bytes @ 0x45
  1598  0065                     	ds	2
  1599                           
  1600                           	psect	maintext
  1601  0553                     __pmaintext:	
  1602 ;;
  1603 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1604 ;;
  1605 ;; *************** function _main *****************
  1606 ;; Defined at:
  1607 ;;		line 8 in file "main.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;		None
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  my_string      64    0[BANK3 ] unsigned char [64]
  1612 ;;  exp_msg        64    0[BANK2 ] unsigned char [64]
  1613 ;;  comp_msg       64    0[BANK1 ] unsigned char [64]
  1614 ;;  len_comp_msg    2   69[BANK0 ] int 
  1615 ;;  len_msg         2   67[BANK0 ] int 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  2   20[None  ] int 
  1618 ;; Registers used:
  1619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : B1F/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  1625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1626 ;;      Locals:         0       4      64      64      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1628 ;;      Totals:         0       5      64      64      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1629 ;;Total ram usage:      197 bytes
  1630 ;; Hardware stack levels required when called: 4
  1631 ;; This function calls:
  1632 ;;		___awdiv
  1633 ;;		___wmul
  1634 ;;		_safe_compress
  1635 ;;		_safe_sprintf1
  1636 ;;		_safe_sprintf2
  1637 ;;		_safe_sprintf3
  1638 ;;		_safe_sprintf4
  1639 ;;		_safe_string_compare
  1640 ;;		_safe_string_length
  1641 ;;		_safe_uncompress
  1642 ;; This function is called by:
  1643 ;;		Startup code after reset
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           
  1648                           ;psect for function _main
  1649  0553                     _main:
  1650  0553                     l1408:	
  1651                           ;incstack = 0
  1652                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1653                           
  1654                           
  1655                           ;main.c: 10: char_t my_string[64];;main.c: 11: const char_t msg[] = "The quick brown fox
      +                          ";;main.c: 12: int16_t len_msg = safe_string_length(msg);
  1656  0553  3000               	movlw	low (main@msg| (0+32768))
  1657  0554  00F0               	movwf	safe_string_length@aString
  1658  0555  3088               	movlw	high (main@msg| (0+32768))
  1659  0556  00F1               	movwf	safe_string_length@aString+1
  1660  0557  3183  231E  3185   	fcall	_safe_string_length
  1661  055A  0871               	movf	?_safe_string_length+1,w
  1662  055B  0020               	movlb	0	; select bank0
  1663  055C  00E4               	movwf	main@len_msg+1
  1664  055D  0870               	movf	?_safe_string_length,w
  1665  055E  00E3               	movwf	main@len_msg
  1666  055F                     l1410:
  1667                           
  1668                           ;main.c: 13: uint8_t comp_msg[64]={0};
  1669  055F  30A0               	movlw	low main@comp_msg
  1670  0560  0086               	movwf	6
  1671  0561  3000               	movlw	high main@comp_msg
  1672  0562  0087               	movwf	7
  1673  0563  3040               	movlw	64
  1674  0564  00E2               	movwf	??_main
  1675  0565  3000               	movlw	0
  1676  0566                     u1180:
  1677  0566  001E               	movwi fsr1++
  1678  0567  0BE2               	decfsz	??_main,f
  1679  0568  2D66               	goto	u1180
  1680  0569                     l1412:
  1681                           
  1682                           ;main.c: 14: char_t exp_msg[64];;main.c: 15: int16_t len_comp_msg = (len_msg * 7) / 8;
  1683  0569  3008               	movlw	8
  1684  056A  00F6               	movwf	___awdiv@divisor
  1685  056B  3000               	movlw	0
  1686  056C  00F7               	movwf	___awdiv@divisor+1
  1687  056D  0864               	movf	main@len_msg+1,w
  1688  056E  00F1               	movwf	___wmul@multiplier+1
  1689  056F  0863               	movf	main@len_msg,w
  1690  0570  00F0               	movwf	___wmul@multiplier
  1691  0571  3007               	movlw	7
  1692  0572  00F2               	movwf	___wmul@multiplicand
  1693  0573  3000               	movlw	0
  1694  0574  00F3               	movwf	___wmul@multiplicand+1
  1695  0575  3183  233B  3185   	fcall	___wmul
  1696  0578  0871               	movf	?___wmul+1,w
  1697  0579  00F9               	movwf	___awdiv@dividend+1
  1698  057A  0870               	movf	?___wmul,w
  1699  057B  00F8               	movwf	___awdiv@dividend
  1700  057C  3184  2475  3185   	fcall	___awdiv
  1701  057F  0877               	movf	?___awdiv+1,w
  1702  0580  0020               	movlb	0	; select bank0
  1703  0581  00E6               	movwf	main@len_comp_msg+1
  1704  0582  0876               	movf	?___awdiv,w
  1705  0583  00E5               	movwf	main@len_comp_msg
  1706  0584                     l1414:
  1707                           
  1708                           ;main.c: 17: my_string[0] = 0;
  1709  0584  0023               	movlb	3	; select bank3
  1710  0585  01A0               	clrf	main@my_string^(0+384)
  1711  0586                     l1416:
  1712                           
  1713                           ;main.c: 18: (void)safe_sprintf4(&my_string[0], "%8d %8d %8d %8d", 12, 34, 45, 56);
  1714  0586  3014               	movlw	low (STR_1| (0+32768))
  1715  0587  0020               	movlb	0	; select bank0
  1716  0588  00D8               	movwf	safe_sprintf4@format4
  1717  0589  3088               	movlw	high (STR_1| (0+32768))
  1718  058A  00D9               	movwf	safe_sprintf4@format4+1
  1719  058B  300C               	movlw	12
  1720  058C  00DA               	movwf	safe_sprintf4@d14
  1721  058D  3000               	movlw	0
  1722  058E  00DB               	movwf	safe_sprintf4@d14+1
  1723  058F  3022               	movlw	34
  1724  0590  00DC               	movwf	safe_sprintf4@d24
  1725  0591  3000               	movlw	0
  1726  0592  00DD               	movwf	safe_sprintf4@d24+1
  1727  0593  302D               	movlw	45
  1728  0594  00DE               	movwf	safe_sprintf4@d34
  1729  0595  3000               	movlw	0
  1730  0596  00DF               	movwf	safe_sprintf4@d34+1
  1731  0597  3038               	movlw	56
  1732  0598  00E0               	movwf	safe_sprintf4@d44
  1733  0599  3000               	movlw	0
  1734  059A  00E1               	movwf	safe_sprintf4@d44+1
  1735  059B  30A0               	movlw	(low (main@my_string| (0+256)))& (0+255)
  1736  059C  3183  23B7  3185   	fcall	_safe_sprintf4
  1737  059F                     l1418:
  1738                           
  1739                           ;main.c: 19: (void)safe_sprintf3(&my_string[0], "%8d %8d %8d", 42, 56, 78);
  1740  059F  3018               	movlw	low ((STR_1+4)| (0+32768))
  1741  05A0  0020               	movlb	0	; select bank0
  1742  05A1  00D8               	movwf	safe_sprintf3@format3
  1743  05A2  3088               	movlw	high ((STR_1+4)| (0+32768))
  1744  05A3  00D9               	movwf	safe_sprintf3@format3+1
  1745  05A4  302A               	movlw	42
  1746  05A5  00DA               	movwf	safe_sprintf3@d13
  1747  05A6  3000               	movlw	0
  1748  05A7  00DB               	movwf	safe_sprintf3@d13+1
  1749  05A8  3038               	movlw	56
  1750  05A9  00DC               	movwf	safe_sprintf3@d23
  1751  05AA  3000               	movlw	0
  1752  05AB  00DD               	movwf	safe_sprintf3@d23+1
  1753  05AC  304E               	movlw	78
  1754  05AD  00DE               	movwf	safe_sprintf3@d33
  1755  05AE  3000               	movlw	0
  1756  05AF  00DF               	movwf	safe_sprintf3@d33+1
  1757  05B0  30A0               	movlw	(low (main@my_string| (0+256)))& (0+255)
  1758  05B1  3183  2398  3185   	fcall	_safe_sprintf3
  1759  05B4                     l1420:
  1760                           
  1761                           ;main.c: 20: (void)safe_sprintf2(&my_string[0], "%8d %8d", 1, 1024);
  1762  05B4  301C               	movlw	low ((STR_1+8)| (0+32768))
  1763  05B5  0020               	movlb	0	; select bank0
  1764  05B6  00D8               	movwf	safe_sprintf2@format2
  1765  05B7  3088               	movlw	high ((STR_1+8)| (0+32768))
  1766  05B8  00D9               	movwf	safe_sprintf2@format2+1
  1767  05B9  3001               	movlw	1
  1768  05BA  00DA               	movwf	safe_sprintf2@d12
  1769  05BB  3000               	movlw	0
  1770  05BC  00DB               	movwf	safe_sprintf2@d12+1
  1771  05BD  3000               	movlw	0
  1772  05BE  00DC               	movwf	safe_sprintf2@d22
  1773  05BF  3004               	movlw	4
  1774  05C0  00DD               	movwf	safe_sprintf2@d22+1
  1775  05C1  30A0               	movlw	(low (main@my_string| (0+256)))& (0+255)
  1776  05C2  3183  2379  3185   	fcall	_safe_sprintf2
  1777  05C5                     l1422:
  1778                           
  1779                           ;main.c: 21: (void)safe_sprintf1(&my_string[0], "%d", 987654321);
  1780  05C5  3030               	movlw	low (STR_4| (0+32768))
  1781  05C6  0020               	movlb	0	; select bank0
  1782  05C7  00D8               	movwf	safe_sprintf1@format1
  1783  05C8  3088               	movlw	high (STR_4| (0+32768))
  1784  05C9  00D9               	movwf	safe_sprintf1@format1+1
  1785  05CA  30B1               	movlw	177
  1786  05CB  00DA               	movwf	safe_sprintf1@d11
  1787  05CC  3068               	movlw	104
  1788  05CD  00DB               	movwf	safe_sprintf1@d11+1
  1789  05CE  30A0               	movlw	(low (main@my_string| (0+256)))& (0+255)
  1790  05CF  3183  235A  3185   	fcall	_safe_sprintf1
  1791  05D2                     l1424:
  1792                           
  1793                           ;main.c: 22: (void)safe_sprintf1(&my_string[0], "%8d", -1234567);
  1794  05D2  3020               	movlw	low ((STR_1+12)| (0+32768))
  1795  05D3  0020               	movlb	0	; select bank0
  1796  05D4  00D8               	movwf	safe_sprintf1@format1
  1797  05D5  3088               	movlw	high ((STR_1+12)| (0+32768))
  1798  05D6  00D9               	movwf	safe_sprintf1@format1+1
  1799  05D7  3079               	movlw	121
  1800  05D8  00DA               	movwf	safe_sprintf1@d11
  1801  05D9  3029               	movlw	41
  1802  05DA  00DB               	movwf	safe_sprintf1@d11+1
  1803  05DB  30A0               	movlw	(low (main@my_string| (0+256)))& (0+255)
  1804  05DC  3183  235A  3185   	fcall	_safe_sprintf1
  1805  05DF                     l1426:
  1806                           
  1807                           ;main.c: 23: (void)safe_sprintf1(&my_string[0], "%6d", -12345);
  1808  05DF  3028               	movlw	low (STR_6| (0+32768))
  1809  05E0  0020               	movlb	0	; select bank0
  1810  05E1  00D8               	movwf	safe_sprintf1@format1
  1811  05E2  3088               	movlw	high (STR_6| (0+32768))
  1812  05E3  00D9               	movwf	safe_sprintf1@format1+1
  1813  05E4  30C7               	movlw	199
  1814  05E5  00DA               	movwf	safe_sprintf1@d11
  1815  05E6  30CF               	movlw	207
  1816  05E7  00DB               	movwf	safe_sprintf1@d11+1
  1817  05E8  30A0               	movlw	(low (main@my_string| (0+256)))& (0+255)
  1818  05E9  3183  235A  3185   	fcall	_safe_sprintf1
  1819  05EC                     l1428:
  1820                           
  1821                           ;main.c: 24: (void)safe_sprintf1(&my_string[0], "%2d", -1);
  1822  05EC  3024               	movlw	low (STR_7| (0+32768))
  1823  05ED  0020               	movlb	0	; select bank0
  1824  05EE  00D8               	movwf	safe_sprintf1@format1
  1825  05EF  3088               	movlw	high (STR_7| (0+32768))
  1826  05F0  00D9               	movwf	safe_sprintf1@format1+1
  1827  05F1  30FF               	movlw	255
  1828  05F2  00DA               	movwf	safe_sprintf1@d11
  1829  05F3  30FF               	movlw	255
  1830  05F4  00DB               	movwf	safe_sprintf1@d11+1
  1831  05F5  30A0               	movlw	(low (main@my_string| (0+256)))& (0+255)
  1832  05F6  3183  235A  3185   	fcall	_safe_sprintf1
  1833  05F9                     l1430:
  1834                           
  1835                           ;main.c: 25: (void)safe_sprintf1(&my_string[0], "%4x", 0xabcd);
  1836  05F9  302C               	movlw	low (STR_8| (0+32768))
  1837  05FA  0020               	movlb	0	; select bank0
  1838  05FB  00D8               	movwf	safe_sprintf1@format1
  1839  05FC  3088               	movlw	high (STR_8| (0+32768))
  1840  05FD  00D9               	movwf	safe_sprintf1@format1+1
  1841  05FE  30CD               	movlw	205
  1842  05FF  00DA               	movwf	safe_sprintf1@d11
  1843  0600  30AB               	movlw	171
  1844  0601  00DB               	movwf	safe_sprintf1@d11+1
  1845  0602  30A0               	movlw	(low (main@my_string| (0+256)))& (0+255)
  1846  0603  3183  235A  3185   	fcall	_safe_sprintf1
  1847  0606                     l1432:
  1848                           
  1849                           ;main.c: 26: (void)safe_sprintf1(&my_string[0], "%p", 1);
  1850  0606  3033               	movlw	low (STR_9| (0+32768))
  1851  0607  0020               	movlb	0	; select bank0
  1852  0608  00D8               	movwf	safe_sprintf1@format1
  1853  0609  3088               	movlw	high (STR_9| (0+32768))
  1854  060A  00D9               	movwf	safe_sprintf1@format1+1
  1855  060B  3001               	movlw	1
  1856  060C  00DA               	movwf	safe_sprintf1@d11
  1857  060D  3000               	movlw	0
  1858  060E  00DB               	movwf	safe_sprintf1@d11+1
  1859  060F  30A0               	movlw	(low (main@my_string| (0+256)))& (0+255)
  1860  0610  3183  235A  3185   	fcall	_safe_sprintf1
  1861  0613                     l1434:
  1862                           
  1863                           ;main.c: 28: (void)safe_compress(comp_msg, msg);
  1864  0613  3000               	movlw	low (main@msg| (0+32768))
  1865  0614  00F0               	movwf	safe_compress@aString1
  1866  0615  3088               	movlw	high (main@msg| (0+32768))
  1867  0616  00F1               	movwf	safe_compress@aString1+1
  1868  0617  30A0               	movlw	(low (main@comp_msg| 0))& (0+255)
  1869  0618  3182  22FB  3185   	fcall	_safe_compress
  1870  061B                     l1436:
  1871                           
  1872                           ;main.c: 29: (void)safe_uncompress(exp_msg, comp_msg, len_comp_msg);
  1873  061B  30A0               	movlw	(low (main@comp_msg| 0))& (0+255)
  1874  061C  0020               	movlb	0	; select bank0
  1875  061D  00E2               	movwf	??_main
  1876  061E  0862               	movf	??_main,w
  1877  061F  00F0               	movwf	safe_uncompress@anArray
  1878  0620  0866               	movf	main@len_comp_msg+1,w
  1879  0621  00F2               	movwf	safe_uncompress@arraySize+1
  1880  0622  0865               	movf	main@len_comp_msg,w
  1881  0623  00F1               	movwf	safe_uncompress@arraySize
  1882  0624  3020               	movlw	(low (main@exp_msg| (0+256)))& (0+255)
  1883  0625  3182  22EE  3185   	fcall	_safe_uncompress
  1884  0628                     l1438:
  1885                           
  1886                           ;main.c: 30: exp_msg[len_msg-1] = '\0';
  1887  0628  0020               	movlb	0	; select bank0
  1888  0629  0863               	movf	main@len_msg,w
  1889  062A  3EFF               	addlw	255
  1890  062B  3E20               	addlw	(low (main@exp_msg| (0+256)))& (0+255)
  1891  062C  0086               	movwf	6
  1892  062D  3001               	movlw	1	; select bank2/3
  1893  062E  0087               	movwf	7
  1894  062F  0181               	clrf	1
  1895  0630                     l1440:
  1896                           
  1897                           ;main.c: 32: (void)safe_string_compare(msg, exp_msg,len_comp_msg);
  1898  0630  3000               	movlw	low (main@msg| (0+32768))
  1899  0631  00F0               	movwf	safe_string_compare@aString1
  1900  0632  3088               	movlw	high (main@msg| (0+32768))
  1901  0633  00F1               	movwf	safe_string_compare@aString1+1
  1902  0634  3020               	movlw	(low (main@exp_msg| (0+256)))& (0+255)
  1903  0635  00E2               	movwf	??_main
  1904  0636  0862               	movf	??_main,w
  1905  0637  00F2               	movwf	safe_string_compare@aString2
  1906  0638  0866               	movf	main@len_comp_msg+1,w
  1907  0639  00F4               	movwf	safe_string_compare@max_chars+1
  1908  063A  0865               	movf	main@len_comp_msg,w
  1909  063B  00F3               	movwf	safe_string_compare@max_chars
  1910  063C  3183  23D6  3185   	fcall	_safe_string_compare
  1911  063F                     l25:
  1912  063F  3180  2802         	ljmp	start
  1913  0641                     __end_of_main:
  1914                           
  1915                           	psect	text1
  1916  02EE                     __ptext1:	
  1917 ;; *************** function _safe_uncompress *****************
  1918 ;; Defined at:
  1919 ;;		line 21 in file "safe_compress.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;  aString         1    wreg     PTR unsigned char 
  1922 ;;		 -> main@exp_msg(64), 
  1923 ;;  anArray         1    0[COMMON] PTR const unsigned char 
  1924 ;;		 -> main@comp_msg(64), 
  1925 ;;  arraySize       2    1[COMMON] const int 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  aString         1    3[COMMON] PTR unsigned char 
  1928 ;;		 -> main@exp_msg(64), 
  1929 ;;  uncompress_s    1    0        unsigned char 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      unsigned char 
  1932 ;; Registers used:
  1933 ;;		wreg, status,2, status,0
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  1939 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1942 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1943 ;;Total ram usage:        4 bytes
  1944 ;; Hardware stack levels used: 1
  1945 ;; This function calls:
  1946 ;;		Nothing
  1947 ;; This function is called by:
  1948 ;;		_main
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           
  1953                           ;psect for function _safe_uncompress
  1954  02EE                     _safe_uncompress:
  1955                           
  1956                           ;incstack = 0
  1957                           ; Regs used in _safe_uncompress: [wreg+status,2+status,0]
  1958                           ;safe_uncompress@aString stored from wreg
  1959  02EE  00F3               	movwf	safe_uncompress@aString
  1960  02EF                     l1376:
  1961                           
  1962                           ;safe_compress.c: 22: bool uncompress_status;;safe_compress.c: 24: if ( (anArray == (uin
      +                          t8_t*)0) || (aString == (char_t*)0) ) {
  1963  02EF  0870               	movf	safe_uncompress@anArray,w
  1964  02F0  1903               	btfsc	3,2
  1965  02F1  2AF3               	goto	u1101
  1966  02F2  2AF4               	goto	u1100
  1967  02F3                     u1101:
  1968  02F3  2AF9               	goto	l1380
  1969  02F4                     u1100:
  1970  02F4                     l1378:
  1971  02F4  0873               	movf	safe_uncompress@aString,w
  1972  02F5  1D03               	btfss	3,2
  1973  02F6  2AF8               	goto	u1111
  1974  02F7  2AF9               	goto	u1110
  1975  02F8                     u1111:
  1976  02F8  2AFA               	goto	l35
  1977  02F9                     u1110:
  1978  02F9                     l1380:
  1979                           
  1980                           ;safe_compress.c: 26: } else {
  1981  02F9  2AFA               	goto	l39
  1982  02FA                     l35:
  1983  02FA                     l39:
  1984  02FA  0008               	return
  1985  02FB                     __end_of_safe_uncompress:
  1986                           
  1987                           	psect	text2
  1988  031E                     __ptext2:	
  1989 ;; *************** function _safe_string_length *****************
  1990 ;; Defined at:
  1991 ;;		line 6 in file "safe_string.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  aString         2    0[COMMON] PTR const unsigned char 
  1994 ;;		 -> main@msg(20), 
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  n               2    3[COMMON] int 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  2    0[COMMON] int 
  1999 ;; Registers used:
  2000 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2009 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2010 ;;Total ram usage:        5 bytes
  2011 ;; Hardware stack levels used: 1
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           
  2020                           ;psect for function _safe_string_length
  2021  031E                     _safe_string_length:
  2022  031E                     l1340:	
  2023                           ;incstack = 0
  2024                           ; Regs used in _safe_string_length: [wreg-fsr0h+status,2+status,0]
  2025                           
  2026                           
  2027                           ;safe_string.c: 7: int16_t n=0;
  2028  031E  01F3               	clrf	safe_string_length@n
  2029  031F  01F4               	clrf	safe_string_length@n+1
  2030  0320                     l1342:
  2031                           
  2032                           ;safe_string.c: 8: if ( aString != (char_t*)0 ) {
  2033  0320  0870               	movf	safe_string_length@aString,w
  2034  0321  0471               	iorwf	safe_string_length@aString+1,w
  2035  0322  1903               	btfsc	3,2
  2036  0323  2B25               	goto	u1061
  2037  0324  2B26               	goto	u1060
  2038  0325                     u1061:
  2039  0325  2B36               	goto	l1350
  2040  0326                     u1060:
  2041  0326  2B2B               	goto	l1348
  2042  0327                     l1346:
  2043                           
  2044                           ;safe_string.c: 10: n++;
  2045  0327  3001               	movlw	1
  2046  0328  07F3               	addwf	safe_string_length@n,f
  2047  0329  3000               	movlw	0
  2048  032A  3DF4               	addwfc	safe_string_length@n+1,f
  2049  032B                     l1348:
  2050  032B  0870               	movf	safe_string_length@aString,w
  2051  032C  0773               	addwf	safe_string_length@n,w
  2052  032D  0084               	movwf	4
  2053  032E  0871               	movf	safe_string_length@aString+1,w
  2054  032F  3D74               	addwfc	safe_string_length@n+1,w
  2055  0330  0085               	movwf	5
  2056  0331  0012               	moviw fsr0++
  2057  0332  1D03               	btfss	3,2
  2058  0333  2B35               	goto	u1071
  2059  0334  2B36               	goto	u1070
  2060  0335                     u1071:
  2061  0335  2B27               	goto	l1346
  2062  0336                     u1070:
  2063  0336                     l1350:
  2064                           
  2065                           ;safe_string.c: 11: };safe_string.c: 12: };safe_string.c: 13: return n;
  2066  0336  0874               	movf	safe_string_length@n+1,w
  2067  0337  00F1               	movwf	?_safe_string_length+1
  2068  0338  0873               	movf	safe_string_length@n,w
  2069  0339  00F0               	movwf	?_safe_string_length
  2070  033A                     l91:
  2071  033A  0008               	return
  2072  033B                     __end_of_safe_string_length:
  2073                           
  2074                           	psect	text3
  2075  03D6                     __ptext3:	
  2076 ;; *************** function _safe_string_compare *****************
  2077 ;; Defined at:
  2078 ;;		line 21 in file "safe_string.c"
  2079 ;; Parameters:    Size  Location     Type
  2080 ;;  aString1        2    0[COMMON] PTR const unsigned char 
  2081 ;;		 -> main@msg(20), 
  2082 ;;  aString2        1    2[COMMON] PTR const unsigned char 
  2083 ;;		 -> main@exp_msg(64), 
  2084 ;;  max_chars       2    3[COMMON] const int 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  i               2    7[COMMON] int 
  2087 ;;  loop            1    6[COMMON] unsigned char 
  2088 ;;  ret             1    0        unsigned char 
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      unsigned char 
  2091 ;; Registers used:
  2092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2098 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2099 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2100 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2101 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2102 ;;Total ram usage:        9 bytes
  2103 ;; Hardware stack levels used: 1
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_main
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           
  2112                           ;psect for function _safe_string_compare
  2113  03D6                     _safe_string_compare:
  2114  03D6                     l1382:	
  2115                           ;incstack = 0
  2116                           ; Regs used in _safe_string_compare: [wreg-fsr1h+status,2+status,0+pclath]
  2117                           
  2118  03D6                     l1384:
  2119                           
  2120                           ;safe_string.c: 24: if ( (aString1 == (char_t*)0) || (aString2 == (char_t*)0) ) {
  2121  03D6  0870               	movf	safe_string_compare@aString1,w
  2122  03D7  0471               	iorwf	safe_string_compare@aString1+1,w
  2123  03D8  1903               	btfsc	3,2
  2124  03D9  2BDB               	goto	u1121
  2125  03DA  2BDC               	goto	u1120
  2126  03DB                     u1121:
  2127  03DB  2BE1               	goto	l1388
  2128  03DC                     u1120:
  2129  03DC                     l1386:
  2130  03DC  0872               	movf	safe_string_compare@aString2,w
  2131  03DD  1D03               	btfss	3,2
  2132  03DE  2BE0               	goto	u1131
  2133  03DF  2BE1               	goto	u1130
  2134  03E0                     u1131:
  2135  03E0  2BE2               	goto	l94
  2136  03E1                     u1130:
  2137  03E1                     l1388:
  2138                           
  2139                           ;safe_string.c: 26: } else {
  2140  03E1  2C21               	goto	l106
  2141  03E2                     l94:
  2142                           
  2143                           ;safe_string.c: 27: bool loop=1;
  2144  03E2  01F6               	clrf	safe_string_compare@loop
  2145  03E3  0AF6               	incf	safe_string_compare@loop,f
  2146  03E4                     l1390:
  2147                           
  2148                           ;safe_string.c: 28: int16_t i=0;
  2149  03E4  01F7               	clrf	safe_string_compare@i
  2150  03E5  01F8               	clrf	safe_string_compare@i+1
  2151                           
  2152                           ;safe_string.c: 30: while ( loop ) {
  2153  03E6  2C1C               	goto	l1406
  2154  03E7                     l1392:
  2155                           
  2156                           ;safe_string.c: 31: if ( i >= max_chars ) {
  2157  03E7  0878               	movf	safe_string_compare@i+1,w
  2158  03E8  3A80               	xorlw	128
  2159  03E9  00F5               	movwf	??_safe_string_compare
  2160  03EA  0874               	movf	safe_string_compare@max_chars+1,w
  2161  03EB  3A80               	xorlw	128
  2162  03EC  0275               	subwf	??_safe_string_compare,w
  2163  03ED  1D03               	skipz
  2164  03EE  2BF1               	goto	u1145
  2165  03EF  0873               	movf	safe_string_compare@max_chars,w
  2166  03F0  0277               	subwf	safe_string_compare@i,w
  2167  03F1                     u1145:
  2168  03F1  1C03               	skipc
  2169  03F2  2BF4               	goto	u1141
  2170  03F3  2BF5               	goto	u1140
  2171  03F4                     u1141:
  2172  03F4  2BF7               	goto	l1396
  2173  03F5                     u1140:
  2174  03F5                     l1394:
  2175                           
  2176                           ;safe_string.c: 32: loop=0;
  2177  03F5  01F6               	clrf	safe_string_compare@loop
  2178                           
  2179                           ;safe_string.c: 33: } else {
  2180  03F6  2C18               	goto	l1404
  2181  03F7                     l1396:
  2182                           
  2183                           ;safe_string.c: 34: if (aString1[i] != aString2[i] ) {
  2184  03F7  0877               	movf	safe_string_compare@i,w
  2185  03F8  0772               	addwf	safe_string_compare@aString2,w
  2186  03F9  00F5               	movwf	??_safe_string_compare
  2187  03FA  0875               	movf	??_safe_string_compare,w
  2188  03FB  0086               	movwf	6
  2189  03FC  3001               	movlw	1	; select bank2/3
  2190  03FD  0087               	movwf	7
  2191  03FE  0870               	movf	safe_string_compare@aString1,w
  2192  03FF  0777               	addwf	safe_string_compare@i,w
  2193  0400  0084               	movwf	4
  2194  0401  0871               	movf	safe_string_compare@aString1+1,w
  2195  0402  3D78               	addwfc	safe_string_compare@i+1,w
  2196  0403  0085               	movwf	5
  2197  0404  0800               	movf	0,w	;code access
  2198  0405  0601               	xorwf	1,w
  2199  0406  1903               	skipnz
  2200  0407  2C09               	goto	u1151
  2201  0408  2C0A               	goto	u1150
  2202  0409                     u1151:
  2203  0409  2C0C               	goto	l1400
  2204  040A                     u1150:
  2205  040A                     l1398:
  2206                           
  2207                           ;safe_string.c: 35: loop=0;
  2208  040A  01F6               	clrf	safe_string_compare@loop
  2209                           
  2210                           ;safe_string.c: 37: } else {
  2211  040B  2C18               	goto	l1404
  2212  040C                     l1400:
  2213                           
  2214                           ;safe_string.c: 38: if ( aString1[i] == '\0' ) {
  2215  040C  0870               	movf	safe_string_compare@aString1,w
  2216  040D  0777               	addwf	safe_string_compare@i,w
  2217  040E  0084               	movwf	4
  2218  040F  0871               	movf	safe_string_compare@aString1+1,w
  2219  0410  3D78               	addwfc	safe_string_compare@i+1,w
  2220  0411  0085               	movwf	5
  2221  0412  0012               	moviw fsr0++
  2222  0413  1D03               	btfss	3,2
  2223  0414  2C16               	goto	u1161
  2224  0415  2C17               	goto	u1160
  2225  0416                     u1161:
  2226  0416  2C18               	goto	l1404
  2227  0417                     u1160:
  2228  0417  2BF5               	goto	l1394
  2229  0418                     l1404:
  2230                           
  2231                           ;safe_string.c: 40: };safe_string.c: 41: };safe_string.c: 42: };safe_string.c: 43: i++;
  2232  0418  3001               	movlw	1
  2233  0419  07F7               	addwf	safe_string_compare@i,f
  2234  041A  3000               	movlw	0
  2235  041B  3DF8               	addwfc	safe_string_compare@i+1,f
  2236  041C                     l1406:
  2237  041C  0876               	movf	safe_string_compare@loop,w
  2238  041D  1D03               	btfss	3,2
  2239  041E  2C20               	goto	u1171
  2240  041F  2C21               	goto	u1170
  2241  0420                     u1171:
  2242  0420  2BE7               	goto	l1392
  2243  0421                     u1170:
  2244  0421                     l106:
  2245  0421  0008               	return
  2246  0422                     __end_of_safe_string_compare:
  2247                           
  2248                           	psect	text4
  2249  03B7                     __ptext4:	
  2250 ;; *************** function _safe_sprintf4 *****************
  2251 ;; Defined at:
  2252 ;;		line 164 in file "safe_sprintf.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  str4            1    wreg     PTR unsigned char 
  2255 ;;		 -> main@my_string(64), 
  2256 ;;  format4         2   56[BANK0 ] PTR const unsigned char 
  2257 ;;		 -> STR_1(16), 
  2258 ;;  d14             2   58[BANK0 ] const int 
  2259 ;;  d24             2   60[BANK0 ] const int 
  2260 ;;  d34             2   62[BANK0 ] const int 
  2261 ;;  d44             2   64[BANK0 ] const int 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  str4            1   13[COMMON] PTR unsigned char 
  2264 ;;		 -> main@my_string(64), 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      unsigned char 
  2267 ;; Registers used:
  2268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2274 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2275 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2277 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2278 ;;Total ram usage:       11 bytes
  2279 ;; Hardware stack levels used: 1
  2280 ;; Hardware stack levels required when called: 3
  2281 ;; This function calls:
  2282 ;;		_safe_sprintf
  2283 ;; This function is called by:
  2284 ;;		_main
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           
  2289                           ;psect for function _safe_sprintf4
  2290  03B7                     _safe_sprintf4:
  2291                           
  2292                           ;incstack = 0
  2293                           ; Regs used in _safe_sprintf4: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2294                           ;safe_sprintf4@str4 stored from wreg
  2295  03B7  00FD               	movwf	safe_sprintf4@str4
  2296  03B8                     l1354:
  2297                           
  2298                           ;safe_sprintf.c: 165: return ( safe_sprintf(str4, format4, 4, d14, d24, d34, d44) );;	Re
      +                          turn value of _safe_sprintf4 is never used
  2299  03B8  0020               	movlb	0	; select bank0
  2300  03B9  0859               	movf	safe_sprintf4@format4+1,w
  2301  03BA  00B2               	movwf	safe_sprintf@format+1
  2302  03BB  0858               	movf	safe_sprintf4@format4,w
  2303  03BC  00B1               	movwf	safe_sprintf@format
  2304  03BD  3004               	movlw	4
  2305  03BE  00B3               	movwf	safe_sprintf@aCount
  2306  03BF  3000               	movlw	0
  2307  03C0  00B4               	movwf	safe_sprintf@aCount+1
  2308  03C1  085B               	movf	safe_sprintf4@d14+1,w
  2309  03C2  00B6               	movwf	safe_sprintf@d1+1
  2310  03C3  085A               	movf	safe_sprintf4@d14,w
  2311  03C4  00B5               	movwf	safe_sprintf@d1
  2312  03C5  085D               	movf	safe_sprintf4@d24+1,w
  2313  03C6  00B8               	movwf	safe_sprintf@d2+1
  2314  03C7  085C               	movf	safe_sprintf4@d24,w
  2315  03C8  00B7               	movwf	safe_sprintf@d2
  2316  03C9  085F               	movf	safe_sprintf4@d34+1,w
  2317  03CA  00BA               	movwf	safe_sprintf@d3+1
  2318  03CB  085E               	movf	safe_sprintf4@d34,w
  2319  03CC  00B9               	movwf	safe_sprintf@d3
  2320  03CD  0861               	movf	safe_sprintf4@d44+1,w
  2321  03CE  00BC               	movwf	safe_sprintf@d4+1
  2322  03CF  0860               	movf	safe_sprintf4@d44,w
  2323  03D0  00BB               	movwf	safe_sprintf@d4
  2324  03D1  087D               	movf	safe_sprintf4@str4,w
  2325  03D2  3186  2641  3183   	fcall	_safe_sprintf
  2326  03D5                     l84:
  2327  03D5  0008               	return
  2328  03D6                     __end_of_safe_sprintf4:
  2329                           
  2330                           	psect	text5
  2331  0398                     __ptext5:	
  2332 ;; *************** function _safe_sprintf3 *****************
  2333 ;; Defined at:
  2334 ;;		line 157 in file "safe_sprintf.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;  str3            1    wreg     PTR unsigned char 
  2337 ;;		 -> main@my_string(64), 
  2338 ;;  format3         2   56[BANK0 ] PTR const unsigned char 
  2339 ;;		 -> STR_2(12), 
  2340 ;;  d13             2   58[BANK0 ] const int 
  2341 ;;  d23             2   60[BANK0 ] const int 
  2342 ;;  d33             2   62[BANK0 ] const int 
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  str3            1   13[COMMON] PTR unsigned char 
  2345 ;;		 -> main@my_string(64), 
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      unsigned char 
  2348 ;; Registers used:
  2349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2355 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2358 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2359 ;;Total ram usage:        9 bytes
  2360 ;; Hardware stack levels used: 1
  2361 ;; Hardware stack levels required when called: 3
  2362 ;; This function calls:
  2363 ;;		_safe_sprintf
  2364 ;; This function is called by:
  2365 ;;		_main
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           
  2370                           ;psect for function _safe_sprintf3
  2371  0398                     _safe_sprintf3:
  2372                           
  2373                           ;incstack = 0
  2374                           ; Regs used in _safe_sprintf3: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2375                           ;safe_sprintf3@str3 stored from wreg
  2376  0398  00FD               	movwf	safe_sprintf3@str3
  2377  0399                     l1358:
  2378                           
  2379                           ;safe_sprintf.c: 158: return (safe_sprintf(str3, format3, 3, d13, d23, d33, d33));;	Retu
      +                          rn value of _safe_sprintf3 is never used
  2380  0399  0020               	movlb	0	; select bank0
  2381  039A  0859               	movf	safe_sprintf3@format3+1,w
  2382  039B  00B2               	movwf	safe_sprintf@format+1
  2383  039C  0858               	movf	safe_sprintf3@format3,w
  2384  039D  00B1               	movwf	safe_sprintf@format
  2385  039E  3003               	movlw	3
  2386  039F  00B3               	movwf	safe_sprintf@aCount
  2387  03A0  3000               	movlw	0
  2388  03A1  00B4               	movwf	safe_sprintf@aCount+1
  2389  03A2  085B               	movf	safe_sprintf3@d13+1,w
  2390  03A3  00B6               	movwf	safe_sprintf@d1+1
  2391  03A4  085A               	movf	safe_sprintf3@d13,w
  2392  03A5  00B5               	movwf	safe_sprintf@d1
  2393  03A6  085D               	movf	safe_sprintf3@d23+1,w
  2394  03A7  00B8               	movwf	safe_sprintf@d2+1
  2395  03A8  085C               	movf	safe_sprintf3@d23,w
  2396  03A9  00B7               	movwf	safe_sprintf@d2
  2397  03AA  085F               	movf	safe_sprintf3@d33+1,w
  2398  03AB  00BA               	movwf	safe_sprintf@d3+1
  2399  03AC  085E               	movf	safe_sprintf3@d33,w
  2400  03AD  00B9               	movwf	safe_sprintf@d3
  2401  03AE  085F               	movf	safe_sprintf3@d33+1,w
  2402  03AF  00BC               	movwf	safe_sprintf@d4+1
  2403  03B0  085E               	movf	safe_sprintf3@d33,w
  2404  03B1  00BB               	movwf	safe_sprintf@d4
  2405  03B2  087D               	movf	safe_sprintf3@str3,w
  2406  03B3  3186  2641  3183   	fcall	_safe_sprintf
  2407  03B6                     l81:
  2408  03B6  0008               	return
  2409  03B7                     __end_of_safe_sprintf3:
  2410                           
  2411                           	psect	text6
  2412  0379                     __ptext6:	
  2413 ;; *************** function _safe_sprintf2 *****************
  2414 ;; Defined at:
  2415 ;;		line 150 in file "safe_sprintf.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  str2            1    wreg     PTR unsigned char 
  2418 ;;		 -> main@my_string(64), 
  2419 ;;  format2         2   56[BANK0 ] PTR const unsigned char 
  2420 ;;		 -> STR_3(8), 
  2421 ;;  d12             2   58[BANK0 ] const int 
  2422 ;;  d22             2   60[BANK0 ] const int 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  str2            1   13[COMMON] PTR unsigned char 
  2425 ;;		 -> main@my_string(64), 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  1    wreg      unsigned char 
  2428 ;; Registers used:
  2429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2435 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2438 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2439 ;;Total ram usage:        7 bytes
  2440 ;; Hardware stack levels used: 1
  2441 ;; Hardware stack levels required when called: 3
  2442 ;; This function calls:
  2443 ;;		_safe_sprintf
  2444 ;; This function is called by:
  2445 ;;		_main
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           
  2450                           ;psect for function _safe_sprintf2
  2451  0379                     _safe_sprintf2:
  2452                           
  2453                           ;incstack = 0
  2454                           ; Regs used in _safe_sprintf2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2455                           ;safe_sprintf2@str2 stored from wreg
  2456  0379  00FD               	movwf	safe_sprintf2@str2
  2457  037A                     l1362:
  2458                           
  2459                           ;safe_sprintf.c: 151: return (safe_sprintf(str2, format2, 2, d12, d22, d22, d22));;	Retu
      +                          rn value of _safe_sprintf2 is never used
  2460  037A  0020               	movlb	0	; select bank0
  2461  037B  0859               	movf	safe_sprintf2@format2+1,w
  2462  037C  00B2               	movwf	safe_sprintf@format+1
  2463  037D  0858               	movf	safe_sprintf2@format2,w
  2464  037E  00B1               	movwf	safe_sprintf@format
  2465  037F  3002               	movlw	2
  2466  0380  00B3               	movwf	safe_sprintf@aCount
  2467  0381  3000               	movlw	0
  2468  0382  00B4               	movwf	safe_sprintf@aCount+1
  2469  0383  085B               	movf	safe_sprintf2@d12+1,w
  2470  0384  00B6               	movwf	safe_sprintf@d1+1
  2471  0385  085A               	movf	safe_sprintf2@d12,w
  2472  0386  00B5               	movwf	safe_sprintf@d1
  2473  0387  085D               	movf	safe_sprintf2@d22+1,w
  2474  0388  00B8               	movwf	safe_sprintf@d2+1
  2475  0389  085C               	movf	safe_sprintf2@d22,w
  2476  038A  00B7               	movwf	safe_sprintf@d2
  2477  038B  085D               	movf	safe_sprintf2@d22+1,w
  2478  038C  00BA               	movwf	safe_sprintf@d3+1
  2479  038D  085C               	movf	safe_sprintf2@d22,w
  2480  038E  00B9               	movwf	safe_sprintf@d3
  2481  038F  085D               	movf	safe_sprintf2@d22+1,w
  2482  0390  00BC               	movwf	safe_sprintf@d4+1
  2483  0391  085C               	movf	safe_sprintf2@d22,w
  2484  0392  00BB               	movwf	safe_sprintf@d4
  2485  0393  087D               	movf	safe_sprintf2@str2,w
  2486  0394  3186  2641  3183   	fcall	_safe_sprintf
  2487  0397                     l78:
  2488  0397  0008               	return
  2489  0398                     __end_of_safe_sprintf2:
  2490                           
  2491                           	psect	text7
  2492  035A                     __ptext7:	
  2493 ;; *************** function _safe_sprintf1 *****************
  2494 ;; Defined at:
  2495 ;;		line 143 in file "safe_sprintf.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  str1            1    wreg     PTR unsigned char 
  2498 ;;		 -> main@my_string(64), 
  2499 ;;  format1         2   56[BANK0 ] PTR const unsigned char 
  2500 ;;		 -> STR_9(3), STR_8(4), STR_7(4), STR_6(4), 
  2501 ;;		 -> STR_5(4), STR_4(3), 
  2502 ;;  d11             2   58[BANK0 ] const int 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  str1            1   13[COMMON] PTR unsigned char 
  2505 ;;		 -> main@my_string(64), 
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      unsigned char 
  2508 ;; Registers used:
  2509 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2515 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2518 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2519 ;;Total ram usage:        5 bytes
  2520 ;; Hardware stack levels used: 1
  2521 ;; Hardware stack levels required when called: 3
  2522 ;; This function calls:
  2523 ;;		_safe_sprintf
  2524 ;; This function is called by:
  2525 ;;		_main
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           
  2530                           ;psect for function _safe_sprintf1
  2531  035A                     _safe_sprintf1:
  2532                           
  2533                           ;incstack = 0
  2534                           ; Regs used in _safe_sprintf1: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2535                           ;safe_sprintf1@str1 stored from wreg
  2536  035A  00FD               	movwf	safe_sprintf1@str1
  2537  035B                     l1366:
  2538                           
  2539                           ;safe_sprintf.c: 144: return (safe_sprintf(str1, format1, 1, d11, d11, d11, d11));;	Retu
      +                          rn value of _safe_sprintf1 is never used
  2540  035B  0020               	movlb	0	; select bank0
  2541  035C  0859               	movf	safe_sprintf1@format1+1,w
  2542  035D  00B2               	movwf	safe_sprintf@format+1
  2543  035E  0858               	movf	safe_sprintf1@format1,w
  2544  035F  00B1               	movwf	safe_sprintf@format
  2545  0360  3001               	movlw	1
  2546  0361  00B3               	movwf	safe_sprintf@aCount
  2547  0362  3000               	movlw	0
  2548  0363  00B4               	movwf	safe_sprintf@aCount+1
  2549  0364  085B               	movf	safe_sprintf1@d11+1,w
  2550  0365  00B6               	movwf	safe_sprintf@d1+1
  2551  0366  085A               	movf	safe_sprintf1@d11,w
  2552  0367  00B5               	movwf	safe_sprintf@d1
  2553  0368  085B               	movf	safe_sprintf1@d11+1,w
  2554  0369  00B8               	movwf	safe_sprintf@d2+1
  2555  036A  085A               	movf	safe_sprintf1@d11,w
  2556  036B  00B7               	movwf	safe_sprintf@d2
  2557  036C  085B               	movf	safe_sprintf1@d11+1,w
  2558  036D  00BA               	movwf	safe_sprintf@d3+1
  2559  036E  085A               	movf	safe_sprintf1@d11,w
  2560  036F  00B9               	movwf	safe_sprintf@d3
  2561  0370  085B               	movf	safe_sprintf1@d11+1,w
  2562  0371  00BC               	movwf	safe_sprintf@d4+1
  2563  0372  085A               	movf	safe_sprintf1@d11,w
  2564  0373  00BB               	movwf	safe_sprintf@d4
  2565  0374  087D               	movf	safe_sprintf1@str1,w
  2566  0375  3186  2641  3183   	fcall	_safe_sprintf
  2567  0378                     l75:
  2568  0378  0008               	return
  2569  0379                     __end_of_safe_sprintf1:
  2570                           
  2571                           	psect	text8
  2572  0641                     __ptext8:	
  2573 ;; *************** function _safe_sprintf *****************
  2574 ;; Defined at:
  2575 ;;		line 58 in file "safe_sprintf.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  string          1    wreg     PTR unsigned char 
  2578 ;;		 -> main@my_string(64), 
  2579 ;;  format          2   17[BANK0 ] PTR const unsigned char 
  2580 ;;		 -> STR_9(3), STR_8(4), STR_7(4), STR_6(4), 
  2581 ;;		 -> STR_5(4), STR_4(3), STR_3(8), STR_2(12), 
  2582 ;;		 -> STR_1(16), 
  2583 ;;  aCount          2   19[BANK0 ] const int 
  2584 ;;  d1              2   21[BANK0 ] const int 
  2585 ;;  d2              2   23[BANK0 ] const int 
  2586 ;;  d3              2   25[BANK0 ] const int 
  2587 ;;  d4              2   27[BANK0 ] const int 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  string          1   55[BANK0 ] PTR unsigned char 
  2590 ;;		 -> main@my_string(64), 
  2591 ;;  width           2   49[BANK0 ] int 
  2592 ;;  digit           8   34[BANK0 ] int [4]
  2593 ;;  count           2   47[BANK0 ] int 
  2594 ;;  digits          2   44[BANK0 ] int 
  2595 ;;  max             2   42[BANK0 ] int 
  2596 ;;  ifmt            2   53[BANK0 ] int 
  2597 ;;  istr            2   51[BANK0 ] int 
  2598 ;;  status2         1   46[BANK0 ] unsigned char 
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      unsigned char 
  2601 ;; Registers used:
  2602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2608 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2609 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2610 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2611 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2612 ;;Total ram usage:       39 bytes
  2613 ;; Hardware stack levels used: 1
  2614 ;; Hardware stack levels required when called: 2
  2615 ;; This function calls:
  2616 ;;		___awdiv
  2617 ;;		___bmul
  2618 ;;		___wmul
  2619 ;;		_safe_int_to_dec
  2620 ;; This function is called by:
  2621 ;;		_safe_sprintf1
  2622 ;;		_safe_sprintf2
  2623 ;;		_safe_sprintf3
  2624 ;;		_safe_sprintf4
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           
  2629                           ;psect for function _safe_sprintf
  2630  0641                     _safe_sprintf:
  2631                           
  2632                           ;incstack = 0
  2633                           ; Regs used in _safe_sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2634                           ;safe_sprintf@string stored from wreg
  2635  0641  0020               	movlb	0	; select bank0
  2636  0642  00D7               	movwf	safe_sprintf@string
  2637  0643                     l1248:
  2638                           
  2639                           ;safe_sprintf.c: 59: bool status2;;safe_sprintf.c: 60: int16_t ifmt=0;
  2640  0643  01D5               	clrf	safe_sprintf@ifmt
  2641  0644  01D6               	clrf	safe_sprintf@ifmt+1
  2642                           
  2643                           ;safe_sprintf.c: 61: int16_t istr=0;
  2644  0645  01D3               	clrf	safe_sprintf@istr
  2645  0646  01D4               	clrf	safe_sprintf@istr+1
  2646  0647                     l1250:
  2647                           
  2648                           ;safe_sprintf.c: 63: if ((format == (char_t*)(0)) || (string == (char_t*)(0))) {
  2649  0647  0831               	movf	safe_sprintf@format,w
  2650  0648  0432               	iorwf	safe_sprintf@format+1,w
  2651  0649  1903               	btfsc	3,2
  2652  064A  2E4C               	goto	u911
  2653  064B  2E4D               	goto	u910
  2654  064C                     u911:
  2655  064C  2E52               	goto	l1254
  2656  064D                     u910:
  2657  064D                     l1252:
  2658  064D  0857               	movf	safe_sprintf@string,w
  2659  064E  1D03               	btfss	3,2
  2660  064F  2E51               	goto	u921
  2661  0650  2E52               	goto	u920
  2662  0651                     u921:
  2663  0651  2E54               	goto	l1256
  2664  0652                     u920:
  2665  0652                     l1254:
  2666                           
  2667                           ;safe_sprintf.c: 64: status2 = 0;
  2668  0652  01CE               	clrf	safe_sprintf@status2
  2669                           
  2670                           ;safe_sprintf.c: 65: } else {
  2671  0653  2FF3               	goto	l1336
  2672  0654                     l1256:
  2673                           
  2674                           ;safe_sprintf.c: 66: int16_t digits;;safe_sprintf.c: 67: int16_t digit[4];;safe_sprintf.
      +                          c: 68: int16_t max = aCount;
  2675  0654  0834               	movf	safe_sprintf@aCount+1,w
  2676  0655  00CB               	movwf	safe_sprintf@max+1
  2677  0656  0833               	movf	safe_sprintf@aCount,w
  2678  0657  00CA               	movwf	safe_sprintf@max
  2679                           
  2680                           ;safe_sprintf.c: 69: int16_t count = aCount;
  2681  0658  0834               	movf	safe_sprintf@aCount+1,w
  2682  0659  00D0               	movwf	safe_sprintf@count+1
  2683  065A  0833               	movf	safe_sprintf@aCount,w
  2684  065B  00CF               	movwf	safe_sprintf@count
  2685                           
  2686                           ;safe_sprintf.c: 70: digit[0] = d1;
  2687  065C  0836               	movf	safe_sprintf@d1+1,w
  2688  065D  00C3               	movwf	safe_sprintf@digit+1
  2689  065E  0835               	movf	safe_sprintf@d1,w
  2690  065F  00C2               	movwf	safe_sprintf@digit
  2691                           
  2692                           ;safe_sprintf.c: 71: digit[1] = d2;
  2693  0660  0838               	movf	safe_sprintf@d2+1,w
  2694  0661  00C5               	movwf	safe_sprintf@digit+3
  2695  0662  0837               	movf	safe_sprintf@d2,w
  2696  0663  00C4               	movwf	safe_sprintf@digit+2
  2697                           
  2698                           ;safe_sprintf.c: 72: digit[2] = d3;
  2699  0664  083A               	movf	safe_sprintf@d3+1,w
  2700  0665  00C7               	movwf	safe_sprintf@digit+5
  2701  0666  0839               	movf	safe_sprintf@d3,w
  2702  0667  00C6               	movwf	safe_sprintf@digit+4
  2703                           
  2704                           ;safe_sprintf.c: 73: digit[3] = d4;
  2705  0668  083C               	movf	safe_sprintf@d4+1,w
  2706  0669  00C9               	movwf	safe_sprintf@digit+7
  2707  066A  083B               	movf	safe_sprintf@d4,w
  2708  066B  00C8               	movwf	safe_sprintf@digit+6
  2709  066C                     l1258:
  2710                           
  2711                           ;safe_sprintf.c: 74: status2 = 1;
  2712  066C  01CE               	clrf	safe_sprintf@status2
  2713  066D  0ACE               	incf	safe_sprintf@status2,f
  2714  066E                     l1260:
  2715                           
  2716                           ;safe_sprintf.c: 78: if ((format[ifmt] == '%') && (count>0)) {
  2717  066E  0831               	movf	safe_sprintf@format,w
  2718  066F  0755               	addwf	safe_sprintf@ifmt,w
  2719  0670  0084               	movwf	4
  2720  0671  0832               	movf	safe_sprintf@format+1,w
  2721  0672  3D56               	addwfc	safe_sprintf@ifmt+1,w
  2722  0673  0085               	movwf	5
  2723  0674  0012               	moviw fsr0++
  2724  0675  3A25               	xorlw	37
  2725  0676  1D03               	btfss	3,2
  2726  0677  2E79               	goto	u931
  2727  0678  2E7A               	goto	u930
  2728  0679                     u931:
  2729  0679  2FC1               	goto	l1324
  2730  067A                     u930:
  2731  067A                     l1262:
  2732  067A  0850               	movf	safe_sprintf@count+1,w
  2733  067B  3A80               	xorlw	128
  2734  067C  00BD               	movwf	??_safe_sprintf
  2735  067D  3080               	movlw	128
  2736  067E  023D               	subwf	??_safe_sprintf,w
  2737  067F  1D03               	skipz
  2738  0680  2E83               	goto	u945
  2739  0681  3001               	movlw	1
  2740  0682  024F               	subwf	safe_sprintf@count,w
  2741  0683                     u945:
  2742  0683  1C03               	skipc
  2743  0684  2E86               	goto	u941
  2744  0685  2E87               	goto	u940
  2745  0686                     u941:
  2746  0686  2FC1               	goto	l1324
  2747  0687                     u940:
  2748  0687                     l1264:
  2749  0687                     l1266:
  2750                           
  2751                           ;safe_sprintf.c: 80: ifmt++;
  2752  0687  3001               	movlw	1
  2753  0688  0020               	movlb	0	; select bank0
  2754  0689  07D5               	addwf	safe_sprintf@ifmt,f
  2755  068A  3000               	movlw	0
  2756  068B  3DD6               	addwfc	safe_sprintf@ifmt+1,f
  2757  068C                     l1268:
  2758                           
  2759                           ;safe_sprintf.c: 82: if ( ((int8_t)(format[ifmt]) >= (int8_t)'1') &&;safe_sprintf.c: 83:
      +                           ((int8_t)(format[ifmt]) <= (int8_t)'9') ) {
  2760  068C  0831               	movf	safe_sprintf@format,w
  2761  068D  0755               	addwf	safe_sprintf@ifmt,w
  2762  068E  0084               	movwf	4
  2763  068F  0832               	movf	safe_sprintf@format+1,w
  2764  0690  3D56               	addwfc	safe_sprintf@ifmt+1,w
  2765  0691  0085               	movwf	5
  2766  0692  0800               	movf	0,w	;code access
  2767  0693  3A80               	xorlw	128
  2768  0694  3E4F               	addlw	-177
  2769  0695  1C03               	skipc
  2770  0696  2E98               	goto	u951
  2771  0697  2E99               	goto	u950
  2772  0698                     u951:
  2773  0698  2EF7               	goto	l1286
  2774  0699                     u950:
  2775  0699                     l1270:
  2776  0699  0831               	movf	safe_sprintf@format,w
  2777  069A  0755               	addwf	safe_sprintf@ifmt,w
  2778  069B  0084               	movwf	4
  2779  069C  0832               	movf	safe_sprintf@format+1,w
  2780  069D  3D56               	addwfc	safe_sprintf@ifmt+1,w
  2781  069E  0085               	movwf	5
  2782  069F  0800               	movf	0,w	;code access
  2783  06A0  3A80               	xorlw	128
  2784  06A1  3E46               	addlw	-186
  2785  06A2  1803               	skipnc
  2786  06A3  2EA5               	goto	u961
  2787  06A4  2EA6               	goto	u960
  2788  06A5                     u961:
  2789  06A5  2EF7               	goto	l1286
  2790  06A6                     u960:
  2791  06A6                     l1272:
  2792                           
  2793                           ;safe_sprintf.c: 84: width = (int16_t)format[ifmt] - (int16_t)'0';
  2794  06A6  0831               	movf	safe_sprintf@format,w
  2795  06A7  0755               	addwf	safe_sprintf@ifmt,w
  2796  06A8  0084               	movwf	4
  2797  06A9  0832               	movf	safe_sprintf@format+1,w
  2798  06AA  3D56               	addwfc	safe_sprintf@ifmt+1,w
  2799  06AB  0085               	movwf	5
  2800  06AC  0800               	movf	0,w	;code access
  2801  06AD  3ED0               	addlw	208
  2802  06AE  00D1               	movwf	safe_sprintf@width
  2803  06AF  30FF               	movlw	255
  2804  06B0  1803               	skipnc
  2805  06B1  3000               	movlw	0
  2806  06B2  00D2               	movwf	safe_sprintf@width+1
  2807  06B3                     l1274:
  2808                           
  2809                           ;safe_sprintf.c: 85: ifmt++;
  2810  06B3  3001               	movlw	1
  2811  06B4  07D5               	addwf	safe_sprintf@ifmt,f
  2812  06B5  3000               	movlw	0
  2813  06B6  3DD6               	addwfc	safe_sprintf@ifmt+1,f
  2814  06B7                     l1276:
  2815                           
  2816                           ;safe_sprintf.c: 87: if ( ((int8_t)(format[ifmt]) >= (int8_t)'0') &&;safe_sprintf.c: 88:
      +                           ((int8_t)(format[ifmt]) <= (int8_t)'9') ) {
  2817  06B7  0831               	movf	safe_sprintf@format,w
  2818  06B8  0755               	addwf	safe_sprintf@ifmt,w
  2819  06B9  0084               	movwf	4
  2820  06BA  0832               	movf	safe_sprintf@format+1,w
  2821  06BB  3D56               	addwfc	safe_sprintf@ifmt+1,w
  2822  06BC  0085               	movwf	5
  2823  06BD  0800               	movf	0,w	;code access
  2824  06BE  3A80               	xorlw	128
  2825  06BF  3E50               	addlw	-176
  2826  06C0  1C03               	skipc
  2827  06C1  2EC3               	goto	u971
  2828  06C2  2EC4               	goto	u970
  2829  06C3                     u971:
  2830  06C3  2F4D               	goto	l1302
  2831  06C4                     u970:
  2832  06C4                     l1278:
  2833  06C4  0831               	movf	safe_sprintf@format,w
  2834  06C5  0755               	addwf	safe_sprintf@ifmt,w
  2835  06C6  0084               	movwf	4
  2836  06C7  0832               	movf	safe_sprintf@format+1,w
  2837  06C8  3D56               	addwfc	safe_sprintf@ifmt+1,w
  2838  06C9  0085               	movwf	5
  2839  06CA  0800               	movf	0,w	;code access
  2840  06CB  3A80               	xorlw	128
  2841  06CC  3E46               	addlw	-186
  2842  06CD  1803               	skipnc
  2843  06CE  2ED0               	goto	u981
  2844  06CF  2ED1               	goto	u980
  2845  06D0                     u981:
  2846  06D0  2F4D               	goto	l1302
  2847  06D1                     u980:
  2848  06D1                     l1280:
  2849                           
  2850                           ;safe_sprintf.c: 89: width *= 10;
  2851  06D1  300A               	movlw	10
  2852  06D2  00F0               	movwf	___wmul@multiplier
  2853  06D3  3000               	movlw	0
  2854  06D4  00F1               	movwf	___wmul@multiplier+1
  2855  06D5  0852               	movf	safe_sprintf@width+1,w
  2856  06D6  00F3               	movwf	___wmul@multiplicand+1
  2857  06D7  0851               	movf	safe_sprintf@width,w
  2858  06D8  00F2               	movwf	___wmul@multiplicand
  2859  06D9  3183  233B  3186   	fcall	___wmul
  2860  06DC  0871               	movf	?___wmul+1,w
  2861  06DD  0020               	movlb	0	; select bank0
  2862  06DE  00D2               	movwf	safe_sprintf@width+1
  2863  06DF  0870               	movf	?___wmul,w
  2864  06E0  00D1               	movwf	safe_sprintf@width
  2865  06E1                     l1282:
  2866                           
  2867                           ;safe_sprintf.c: 90: width += (int16_t)format[ifmt] - (int16_t)'0';
  2868  06E1  0831               	movf	safe_sprintf@format,w
  2869  06E2  0755               	addwf	safe_sprintf@ifmt,w
  2870  06E3  0084               	movwf	4
  2871  06E4  0832               	movf	safe_sprintf@format+1,w
  2872  06E5  3D56               	addwfc	safe_sprintf@ifmt+1,w
  2873  06E6  0085               	movwf	5
  2874  06E7  0800               	movf	0,w	;code access
  2875  06E8  3ED0               	addlw	208
  2876  06E9  00BD               	movwf	??_safe_sprintf
  2877  06EA  30FF               	movlw	255
  2878  06EB  1803               	skipnc
  2879  06EC  3000               	movlw	0
  2880  06ED  00BE               	movwf	??_safe_sprintf+1
  2881  06EE  083D               	movf	??_safe_sprintf,w
  2882  06EF  07D1               	addwf	safe_sprintf@width,f
  2883  06F0  083E               	movf	??_safe_sprintf+1,w
  2884  06F1  3DD2               	addwfc	safe_sprintf@width+1,f
  2885  06F2                     l1284:
  2886                           
  2887                           ;safe_sprintf.c: 91: ifmt++;
  2888  06F2  3001               	movlw	1
  2889  06F3  07D5               	addwf	safe_sprintf@ifmt,f
  2890  06F4  3000               	movlw	0
  2891  06F5  3DD6               	addwfc	safe_sprintf@ifmt+1,f
  2892  06F6  2F4D               	goto	l1302
  2893  06F7                     l1286:
  2894                           
  2895                           ;safe_sprintf.c: 94: width = 1;
  2896  06F7  3001               	movlw	1
  2897  06F8  00D1               	movwf	safe_sprintf@width
  2898  06F9  3000               	movlw	0
  2899  06FA  00D2               	movwf	safe_sprintf@width+1
  2900  06FB                     l1288:
  2901                           
  2902                           ;safe_sprintf.c: 95: digits = digit[max-count];
  2903  06FB  084A               	movf	safe_sprintf@max,w
  2904  06FC  00BD               	movwf	??_safe_sprintf
  2905  06FD  3001               	movlw	1
  2906  06FE                     u995:
  2907  06FE  35BD               	lslf	??_safe_sprintf,f
  2908  06FF  0B89               	decfsz	9,f
  2909  0700  2EFE               	goto	u995
  2910  0701  3042               	movlw	(low (safe_sprintf@digit| 0))& (0+255)
  2911  0702  073D               	addwf	??_safe_sprintf,w
  2912  0703  00BE               	movwf	??_safe_sprintf+1
  2913  0704  30FE               	movlw	254
  2914  0705  00BF               	movwf	??_safe_sprintf+2
  2915  0706  083F               	movf	??_safe_sprintf+2,w
  2916  0707  00F0               	movwf	___bmul@multiplicand
  2917  0708  084F               	movf	safe_sprintf@count,w
  2918  0709  3183  2309  3186   	fcall	___bmul
  2919  070C  0020               	movlb	0	; select bank0
  2920  070D  073E               	addwf	??_safe_sprintf+1,w
  2921  070E  00C0               	movwf	??_safe_sprintf+3
  2922  070F  0840               	movf	??_safe_sprintf+3,w
  2923  0710  0086               	movwf	6
  2924  0711  0187               	clrf	7
  2925  0712  3F40               	moviw [0]fsr1
  2926  0713  00CC               	movwf	safe_sprintf@digits
  2927  0714  3F41               	moviw [1]fsr1
  2928  0715  00CD               	movwf	safe_sprintf@digits+1
  2929                           
  2930                           ;safe_sprintf.c: 101: while (digits > 9) {
  2931  0716  2F2C               	goto	l1294
  2932  0717                     l1290:
  2933                           
  2934                           ;safe_sprintf.c: 102: digits /= 10;
  2935  0717  300A               	movlw	10
  2936  0718  00F6               	movwf	___awdiv@divisor
  2937  0719  3000               	movlw	0
  2938  071A  00F7               	movwf	___awdiv@divisor+1
  2939  071B  0020               	movlb	0	; select bank0
  2940  071C  084D               	movf	safe_sprintf@digits+1,w
  2941  071D  00F9               	movwf	___awdiv@dividend+1
  2942  071E  084C               	movf	safe_sprintf@digits,w
  2943  071F  00F8               	movwf	___awdiv@dividend
  2944  0720  3184  2475  3186   	fcall	___awdiv
  2945  0723  0877               	movf	?___awdiv+1,w
  2946  0724  0020               	movlb	0	; select bank0
  2947  0725  00CD               	movwf	safe_sprintf@digits+1
  2948  0726  0876               	movf	?___awdiv,w
  2949  0727  00CC               	movwf	safe_sprintf@digits
  2950  0728                     l1292:
  2951                           
  2952                           ;safe_sprintf.c: 103: width++;
  2953  0728  3001               	movlw	1
  2954  0729  07D1               	addwf	safe_sprintf@width,f
  2955  072A  3000               	movlw	0
  2956  072B  3DD2               	addwfc	safe_sprintf@width+1,f
  2957  072C                     l1294:
  2958  072C  084D               	movf	safe_sprintf@digits+1,w
  2959  072D  3A80               	xorlw	128
  2960  072E  00BD               	movwf	??_safe_sprintf
  2961  072F  3080               	movlw	128
  2962  0730  023D               	subwf	??_safe_sprintf,w
  2963  0731  1D03               	skipz
  2964  0732  2F35               	goto	u1005
  2965  0733  300A               	movlw	10
  2966  0734  024C               	subwf	safe_sprintf@digits,w
  2967  0735                     u1005:
  2968  0735  1803               	skipnc
  2969  0736  2F38               	goto	u1001
  2970  0737  2F39               	goto	u1000
  2971  0738                     u1001:
  2972  0738  2F17               	goto	l1290
  2973  0739                     u1000:
  2974  0739  2F4D               	goto	l1302
  2975  073A                     l1296:
  2976                           
  2977                           ;safe_sprintf.c: 108: string[istr] = ' ';
  2978  073A  3020               	movlw	32
  2979  073B  00BD               	movwf	??_safe_sprintf
  2980  073C  0853               	movf	safe_sprintf@istr,w
  2981  073D  0757               	addwf	safe_sprintf@string,w
  2982  073E  00BE               	movwf	??_safe_sprintf+1
  2983  073F  083E               	movf	??_safe_sprintf+1,w
  2984  0740  0086               	movwf	6
  2985  0741  3001               	movlw	1	; select bank2/3
  2986  0742  0087               	movwf	7
  2987  0743  083D               	movf	??_safe_sprintf,w
  2988  0744  0081               	movwf	1
  2989  0745                     l1298:
  2990                           
  2991                           ;safe_sprintf.c: 109: istr++;
  2992  0745  3001               	movlw	1
  2993  0746  07D3               	addwf	safe_sprintf@istr,f
  2994  0747  3000               	movlw	0
  2995  0748  3DD4               	addwfc	safe_sprintf@istr+1,f
  2996  0749                     l1300:
  2997                           
  2998                           ;safe_sprintf.c: 110: --width;
  2999  0749  30FF               	movlw	255
  3000  074A  07D1               	addwf	safe_sprintf@width,f
  3001  074B  30FF               	movlw	255
  3002  074C  3DD2               	addwfc	safe_sprintf@width+1,f
  3003  074D                     l1302:
  3004  074D  0020               	movlb	0	; select bank0
  3005  074E  0851               	movf	safe_sprintf@width,w
  3006  074F  0452               	iorwf	safe_sprintf@width+1,w
  3007  0750  1D03               	btfss	3,2
  3008  0751  2F53               	goto	u1011
  3009  0752  2F54               	goto	u1010
  3010  0753                     u1011:
  3011  0753  2F3A               	goto	l1296
  3012  0754                     u1010:
  3013  0754                     l1304:
  3014                           
  3015                           ;safe_sprintf.c: 111: };safe_sprintf.c: 113: if (format[ifmt] == 'd') {
  3016  0754  0831               	movf	safe_sprintf@format,w
  3017  0755  0755               	addwf	safe_sprintf@ifmt,w
  3018  0756  0084               	movwf	4
  3019  0757  0832               	movf	safe_sprintf@format+1,w
  3020  0758  3D56               	addwfc	safe_sprintf@ifmt+1,w
  3021  0759  0085               	movwf	5
  3022  075A  0012               	moviw fsr0++
  3023  075B  3A64               	xorlw	100
  3024  075C  1D03               	btfss	3,2
  3025  075D  2F5F               	goto	u1021
  3026  075E  2F60               	goto	u1020
  3027  075F                     u1021:
  3028  075F  2F90               	goto	l1312
  3029  0760                     u1020:
  3030  0760                     l1306:
  3031                           
  3032                           ;safe_sprintf.c: 114: ifmt++;
  3033  0760  3001               	movlw	1
  3034  0761  07D5               	addwf	safe_sprintf@ifmt,f
  3035  0762  3000               	movlw	0
  3036  0763  3DD6               	addwfc	safe_sprintf@ifmt+1,f
  3037  0764                     l1308:
  3038                           
  3039                           ;safe_sprintf.c: 115: status2 = safe_int_to_dec((char_t*)&string[0], istr, digit[max-cou
      +                          nt]);
  3040  0764  0854               	movf	safe_sprintf@istr+1,w
  3041  0765  00A5               	movwf	safe_int_to_dec@offset+1
  3042  0766  0853               	movf	safe_sprintf@istr,w
  3043  0767  00A4               	movwf	safe_int_to_dec@offset
  3044  0768  084A               	movf	safe_sprintf@max,w
  3045  0769  00BD               	movwf	??_safe_sprintf
  3046  076A  3001               	movlw	1
  3047  076B                     u1035:
  3048  076B  35BD               	lslf	??_safe_sprintf,f
  3049  076C  0B89               	decfsz	9,f
  3050  076D  2F6B               	goto	u1035
  3051  076E  3042               	movlw	(low (safe_sprintf@digit| 0))& (0+255)
  3052  076F  073D               	addwf	??_safe_sprintf,w
  3053  0770  00BE               	movwf	??_safe_sprintf+1
  3054  0771  30FE               	movlw	254
  3055  0772  00BF               	movwf	??_safe_sprintf+2
  3056  0773  083F               	movf	??_safe_sprintf+2,w
  3057  0774  00F0               	movwf	___bmul@multiplicand
  3058  0775  084F               	movf	safe_sprintf@count,w
  3059  0776  3183  2309  3186   	fcall	___bmul
  3060  0779  0020               	movlb	0	; select bank0
  3061  077A  073E               	addwf	??_safe_sprintf+1,w
  3062  077B  00C0               	movwf	??_safe_sprintf+3
  3063  077C  0840               	movf	??_safe_sprintf+3,w
  3064  077D  0086               	movwf	6
  3065  077E  0187               	clrf	7
  3066  077F  3F40               	moviw [0]fsr1
  3067  0780  00A6               	movwf	safe_int_to_dec@aValue
  3068  0781  3F41               	moviw [1]fsr1
  3069  0782  00A7               	movwf	safe_int_to_dec@aValue+1
  3070  0783  0857               	movf	safe_sprintf@string,w
  3071  0784  3184  24D5  3186   	fcall	_safe_int_to_dec
  3072  0787  0020               	movlb	0	; select bank0
  3073  0788  00C1               	movwf	??_safe_sprintf+4
  3074  0789  0841               	movf	??_safe_sprintf+4,w
  3075  078A  00CE               	movwf	safe_sprintf@status2
  3076  078B                     l1310:
  3077                           
  3078                           ;safe_sprintf.c: 116: --count;
  3079  078B  30FF               	movlw	255
  3080  078C  07CF               	addwf	safe_sprintf@count,f
  3081  078D  30FF               	movlw	255
  3082  078E  3DD0               	addwfc	safe_sprintf@count+1,f
  3083                           
  3084                           ;safe_sprintf.c: 117: } else {
  3085  078F  2FDB               	goto	l1330
  3086  0790                     l1312:
  3087                           
  3088                           ;safe_sprintf.c: 119: string[0] = 'E';
  3089  0790  3045               	movlw	69
  3090  0791  00BD               	movwf	??_safe_sprintf
  3091  0792  0857               	movf	safe_sprintf@string,w
  3092  0793  0086               	movwf	6
  3093  0794  3001               	movlw	1	; select bank2/3
  3094  0795  0087               	movwf	7
  3095  0796  083D               	movf	??_safe_sprintf,w
  3096  0797  0081               	movwf	1
  3097                           
  3098                           ;safe_sprintf.c: 120: string[1] = 'r';
  3099  0798  3072               	movlw	114
  3100  0799  00BD               	movwf	??_safe_sprintf
  3101  079A  0A57               	incf	safe_sprintf@string,w
  3102  079B  0086               	movwf	6
  3103  079C  3001               	movlw	1	; select bank2/3
  3104  079D  0087               	movwf	7
  3105  079E  083D               	movf	??_safe_sprintf,w
  3106  079F  0081               	movwf	1
  3107  07A0                     l1314:
  3108                           
  3109                           ;safe_sprintf.c: 121: string[2] = 'r';
  3110  07A0  3072               	movlw	114
  3111  07A1  00BD               	movwf	??_safe_sprintf
  3112  07A2  0857               	movf	safe_sprintf@string,w
  3113  07A3  3E02               	addlw	2
  3114  07A4  0086               	movwf	6
  3115  07A5  3001               	movlw	1	; select bank2/3
  3116  07A6  0087               	movwf	7
  3117  07A7  083D               	movf	??_safe_sprintf,w
  3118  07A8  0081               	movwf	1
  3119  07A9                     l1316:
  3120                           
  3121                           ;safe_sprintf.c: 122: string[3] = 'o';
  3122  07A9  306F               	movlw	111
  3123  07AA  00BD               	movwf	??_safe_sprintf
  3124  07AB  0857               	movf	safe_sprintf@string,w
  3125  07AC  3E03               	addlw	3
  3126  07AD  0086               	movwf	6
  3127  07AE  3001               	movlw	1	; select bank2/3
  3128  07AF  0087               	movwf	7
  3129  07B0  083D               	movf	??_safe_sprintf,w
  3130  07B1  0081               	movwf	1
  3131  07B2                     l1318:
  3132                           
  3133                           ;safe_sprintf.c: 123: string[4] = 'r';
  3134  07B2  3072               	movlw	114
  3135  07B3  00BD               	movwf	??_safe_sprintf
  3136  07B4  0857               	movf	safe_sprintf@string,w
  3137  07B5  3E04               	addlw	4
  3138  07B6  0086               	movwf	6
  3139  07B7  3001               	movlw	1	; select bank2/3
  3140  07B8  0087               	movwf	7
  3141  07B9  083D               	movf	??_safe_sprintf,w
  3142  07BA  0081               	movwf	1
  3143  07BB                     l1320:
  3144                           
  3145                           ;safe_sprintf.c: 124: istr=5;
  3146  07BB  3005               	movlw	5
  3147  07BC  00D3               	movwf	safe_sprintf@istr
  3148  07BD  3000               	movlw	0
  3149  07BE  00D4               	movwf	safe_sprintf@istr+1
  3150  07BF                     l1322:
  3151                           
  3152                           ;safe_sprintf.c: 125: status2= 0;
  3153  07BF  01CE               	clrf	safe_sprintf@status2
  3154  07C0  2FDB               	goto	l1330
  3155  07C1                     l1324:
  3156                           
  3157                           ;safe_sprintf.c: 130: string[istr] = format[ifmt];
  3158  07C1  0020               	movlb	0	; select bank0
  3159  07C2  0831               	movf	safe_sprintf@format,w
  3160  07C3  0755               	addwf	safe_sprintf@ifmt,w
  3161  07C4  0084               	movwf	4
  3162  07C5  0832               	movf	safe_sprintf@format+1,w
  3163  07C6  3D56               	addwfc	safe_sprintf@ifmt+1,w
  3164  07C7  0085               	movwf	5
  3165  07C8  0800               	movf	0,w	;code access
  3166  07C9  00BD               	movwf	??_safe_sprintf
  3167  07CA  0853               	movf	safe_sprintf@istr,w
  3168  07CB  0757               	addwf	safe_sprintf@string,w
  3169  07CC  00BE               	movwf	??_safe_sprintf+1
  3170  07CD  083E               	movf	??_safe_sprintf+1,w
  3171  07CE  0086               	movwf	6
  3172  07CF  3001               	movlw	1	; select bank2/3
  3173  07D0  0087               	movwf	7
  3174  07D1  083D               	movf	??_safe_sprintf,w
  3175  07D2  0081               	movwf	1
  3176  07D3                     l1326:
  3177                           
  3178                           ;safe_sprintf.c: 131: istr++;
  3179  07D3  3001               	movlw	1
  3180  07D4  07D3               	addwf	safe_sprintf@istr,f
  3181  07D5  3000               	movlw	0
  3182  07D6  3DD4               	addwfc	safe_sprintf@istr+1,f
  3183  07D7                     l1328:
  3184                           
  3185                           ;safe_sprintf.c: 132: ifmt++;
  3186  07D7  3001               	movlw	1
  3187  07D8  07D5               	addwf	safe_sprintf@ifmt,f
  3188  07D9  3000               	movlw	0
  3189  07DA  3DD6               	addwfc	safe_sprintf@ifmt+1,f
  3190  07DB                     l1330:
  3191                           
  3192                           ;safe_sprintf.c: 133: };safe_sprintf.c: 134: } while (status2 && (format[ifmt] != '\0'))
      +                          ;
  3193  07DB  084E               	movf	safe_sprintf@status2,w
  3194  07DC  1903               	btfsc	3,2
  3195  07DD  2FDF               	goto	u1041
  3196  07DE  2FE0               	goto	u1040
  3197  07DF                     u1041:
  3198  07DF  2FEB               	goto	l1334
  3199  07E0                     u1040:
  3200  07E0                     l1332:
  3201  07E0  0831               	movf	safe_sprintf@format,w
  3202  07E1  0755               	addwf	safe_sprintf@ifmt,w
  3203  07E2  0084               	movwf	4
  3204  07E3  0832               	movf	safe_sprintf@format+1,w
  3205  07E4  3D56               	addwfc	safe_sprintf@ifmt+1,w
  3206  07E5  0085               	movwf	5
  3207  07E6  0012               	moviw fsr0++
  3208  07E7  1D03               	btfss	3,2
  3209  07E8  2FEA               	goto	u1051
  3210  07E9  2FEB               	goto	u1050
  3211  07EA                     u1051:
  3212  07EA  2E6E               	goto	l1260
  3213  07EB                     u1050:
  3214  07EB                     l1334:
  3215                           
  3216                           ;safe_sprintf.c: 135: string[istr] = '\0';
  3217  07EB  0853               	movf	safe_sprintf@istr,w
  3218  07EC  0757               	addwf	safe_sprintf@string,w
  3219  07ED  00BD               	movwf	??_safe_sprintf
  3220  07EE  083D               	movf	??_safe_sprintf,w
  3221  07EF  0086               	movwf	6
  3222  07F0  3001               	movlw	1	; select bank2/3
  3223  07F1  0087               	movwf	7
  3224  07F2  0181               	clrf	1
  3225  07F3                     l1336:
  3226                           
  3227                           ;safe_sprintf.c: 136: };safe_sprintf.c: 137: return status2;
  3228  07F3  084E               	movf	safe_sprintf@status2,w
  3229  07F4                     l72:
  3230  07F4  0008               	return
  3231  07F5                     __end_of_safe_sprintf:
  3232                           
  3233                           	psect	text9
  3234  04D5                     __ptext9:	
  3235 ;; *************** function _safe_int_to_dec *****************
  3236 ;; Defined at:
  3237 ;;		line 21 in file "safe_sprintf.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  string1         1    wreg     PTR unsigned char 
  3240 ;;		 -> main@my_string(64), 
  3241 ;;  offset          2    4[BANK0 ] const int 
  3242 ;;  aValue          2    6[BANK0 ] const int 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  string1         1   14[BANK0 ] PTR unsigned char 
  3245 ;;		 -> main@my_string(64), 
  3246 ;;  remainder       2    8[BANK0 ] int 
  3247 ;;  value           2   15[BANK0 ] int 
  3248 ;;  index           2   12[BANK0 ] int 
  3249 ;;  neg             1   11[BANK0 ] unsigned char 
  3250 ;;  status1         1   10[BANK0 ] unsigned char 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      unsigned char 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3260 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3261 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3262 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3263 ;;      Totals:         2      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3264 ;;Total ram usage:       15 bytes
  3265 ;; Hardware stack levels used: 1
  3266 ;; Hardware stack levels required when called: 1
  3267 ;; This function calls:
  3268 ;;		___awdiv
  3269 ;;		___awmod
  3270 ;; This function is called by:
  3271 ;;		_safe_sprintf
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           
  3276                           ;psect for function _safe_int_to_dec
  3277  04D5                     _safe_int_to_dec:
  3278                           
  3279                           ;incstack = 0
  3280                           ; Regs used in _safe_int_to_dec: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3281                           ;safe_int_to_dec@string1 stored from wreg
  3282  04D5  0020               	movlb	0	; select bank0
  3283  04D6  00AE               	movwf	safe_int_to_dec@string1
  3284  04D7                     l1186:
  3285                           
  3286                           ;safe_sprintf.c: 22: bool status1;;safe_sprintf.c: 24: if ( string1 == (char_t*)(0)) {
  3287  04D7  082E               	movf	safe_int_to_dec@string1,w
  3288  04D8  1D03               	btfss	3,2
  3289  04D9  2CDB               	goto	u791
  3290  04DA  2CDC               	goto	u790
  3291  04DB                     u791:
  3292  04DB  2CDE               	goto	l1190
  3293  04DC                     u790:
  3294  04DC                     l1188:
  3295                           
  3296                           ;safe_sprintf.c: 25: status1 = 0;
  3297  04DC  01AA               	clrf	safe_int_to_dec@status1
  3298                           
  3299                           ;safe_sprintf.c: 26: } else {
  3300  04DD  2D51               	goto	l1216
  3301  04DE                     l1190:
  3302                           
  3303                           ;safe_sprintf.c: 27: int16_t value=aValue;
  3304  04DE  0827               	movf	safe_int_to_dec@aValue+1,w
  3305  04DF  00B0               	movwf	safe_int_to_dec@value+1
  3306  04E0  0826               	movf	safe_int_to_dec@aValue,w
  3307  04E1  00AF               	movwf	safe_int_to_dec@value
  3308                           
  3309                           ;safe_sprintf.c: 28: int16_t index=offset;
  3310  04E2  0825               	movf	safe_int_to_dec@offset+1,w
  3311  04E3  00AD               	movwf	safe_int_to_dec@index+1
  3312  04E4  0824               	movf	safe_int_to_dec@offset,w
  3313  04E5  00AC               	movwf	safe_int_to_dec@index
  3314                           
  3315                           ;safe_sprintf.c: 30: bool neg = (value < 0);
  3316  04E6  1BB0               	btfsc	safe_int_to_dec@value+1,7
  3317  04E7  2CE9               	goto	u801
  3318  04E8  2CEB               	goto	u800
  3319  04E9                     u801:
  3320  04E9  3001               	movlw	1
  3321  04EA  2CEC               	goto	u810
  3322  04EB                     u800:
  3323  04EB  3000               	movlw	0
  3324  04EC                     u810:
  3325  04EC  00FB               	movwf	??_safe_int_to_dec
  3326  04ED  087B               	movf	??_safe_int_to_dec,w
  3327  04EE  00AB               	movwf	safe_int_to_dec@neg
  3328  04EF                     l1192:
  3329                           
  3330                           ;safe_sprintf.c: 31: if (neg) {
  3331  04EF  082B               	movf	safe_int_to_dec@neg,w
  3332  04F0  1903               	btfsc	3,2
  3333  04F1  2CF3               	goto	u821
  3334  04F2  2CF4               	goto	u820
  3335  04F3                     u821:
  3336  04F3  2CF9               	goto	l1196
  3337  04F4                     u820:
  3338  04F4                     l1194:
  3339                           
  3340                           ;safe_sprintf.c: 32: value = -value;
  3341  04F4  09AF               	comf	safe_int_to_dec@value,f
  3342  04F5  09B0               	comf	safe_int_to_dec@value+1,f
  3343  04F6  0AAF               	incf	safe_int_to_dec@value,f
  3344  04F7  1903               	skipnz
  3345  04F8  0AB0               	incf	safe_int_to_dec@value+1,f
  3346  04F9                     l1196:
  3347                           
  3348                           ;safe_sprintf.c: 33: };safe_sprintf.c: 34: status1 = 1;
  3349  04F9  01AA               	clrf	safe_int_to_dec@status1
  3350  04FA  0AAA               	incf	safe_int_to_dec@status1,f
  3351  04FB                     l1198:
  3352                           
  3353                           ;safe_sprintf.c: 39: int16_t remainder = (value % 10);
  3354  04FB  300A               	movlw	10
  3355  04FC  00F0               	movwf	___awmod@divisor
  3356  04FD  3000               	movlw	0
  3357  04FE  00F1               	movwf	___awmod@divisor+1
  3358  04FF  0020               	movlb	0	; select bank0
  3359  0500  0830               	movf	safe_int_to_dec@value+1,w
  3360  0501  00F3               	movwf	___awmod@dividend+1
  3361  0502  082F               	movf	safe_int_to_dec@value,w
  3362  0503  00F2               	movwf	___awmod@dividend
  3363  0504  3184  2422  3184   	fcall	___awmod
  3364  0507  0871               	movf	?___awmod+1,w
  3365  0508  0020               	movlb	0	; select bank0
  3366  0509  00A9               	movwf	safe_int_to_dec@remainder+1
  3367  050A  0870               	movf	?___awmod,w
  3368  050B  00A8               	movwf	safe_int_to_dec@remainder
  3369  050C                     l1200:
  3370                           
  3371                           ;safe_sprintf.c: 40: remainder += (int16_t)'0';
  3372  050C  3030               	movlw	48
  3373  050D  07A8               	addwf	safe_int_to_dec@remainder,f
  3374  050E  3000               	movlw	0
  3375  050F  3DA9               	addwfc	safe_int_to_dec@remainder+1,f
  3376  0510                     l1202:
  3377                           
  3378                           ;safe_sprintf.c: 41: --index;
  3379  0510  30FF               	movlw	255
  3380  0511  07AC               	addwf	safe_int_to_dec@index,f
  3381  0512  30FF               	movlw	255
  3382  0513  3DAD               	addwfc	safe_int_to_dec@index+1,f
  3383  0514                     l1204:
  3384                           
  3385                           ;safe_sprintf.c: 42: string1[index] = (char_t)remainder;
  3386  0514  0828               	movf	safe_int_to_dec@remainder,w
  3387  0515  00FB               	movwf	??_safe_int_to_dec
  3388  0516  082C               	movf	safe_int_to_dec@index,w
  3389  0517  072E               	addwf	safe_int_to_dec@string1,w
  3390  0518  00FC               	movwf	??_safe_int_to_dec+1
  3391  0519  087C               	movf	??_safe_int_to_dec+1,w
  3392  051A  0086               	movwf	6
  3393  051B  3001               	movlw	1	; select bank2/3
  3394  051C  0087               	movwf	7
  3395  051D  087B               	movf	??_safe_int_to_dec,w
  3396  051E  0081               	movwf	1
  3397  051F                     l1206:
  3398                           
  3399                           ;safe_sprintf.c: 43: value /= 10;
  3400  051F  300A               	movlw	10
  3401  0520  00F6               	movwf	___awdiv@divisor
  3402  0521  3000               	movlw	0
  3403  0522  00F7               	movwf	___awdiv@divisor+1
  3404  0523  0830               	movf	safe_int_to_dec@value+1,w
  3405  0524  00F9               	movwf	___awdiv@dividend+1
  3406  0525  082F               	movf	safe_int_to_dec@value,w
  3407  0526  00F8               	movwf	___awdiv@dividend
  3408  0527  3184  2475  3184   	fcall	___awdiv
  3409  052A  0877               	movf	?___awdiv+1,w
  3410  052B  0020               	movlb	0	; select bank0
  3411  052C  00B0               	movwf	safe_int_to_dec@value+1
  3412  052D  0876               	movf	?___awdiv,w
  3413  052E  00AF               	movwf	safe_int_to_dec@value
  3414  052F                     l1208:
  3415                           
  3416                           ;safe_sprintf.c: 44: } while (value>0);
  3417  052F  0830               	movf	safe_int_to_dec@value+1,w
  3418  0530  3A80               	xorlw	128
  3419  0531  00FB               	movwf	??_safe_int_to_dec
  3420  0532  3080               	movlw	128
  3421  0533  027B               	subwf	??_safe_int_to_dec,w
  3422  0534  1D03               	skipz
  3423  0535  2D38               	goto	u835
  3424  0536  3001               	movlw	1
  3425  0537  022F               	subwf	safe_int_to_dec@value,w
  3426  0538                     u835:
  3427  0538  1803               	skipnc
  3428  0539  2D3B               	goto	u831
  3429  053A  2D3C               	goto	u830
  3430  053B                     u831:
  3431  053B  2CFB               	goto	l1198
  3432  053C                     u830:
  3433  053C                     l1210:
  3434                           
  3435                           ;safe_sprintf.c: 46: if (neg) {
  3436  053C  0020               	movlb	0	; select bank0
  3437  053D  082B               	movf	safe_int_to_dec@neg,w
  3438  053E  1903               	btfsc	3,2
  3439  053F  2D41               	goto	u841
  3440  0540  2D42               	goto	u840
  3441  0541                     u841:
  3442  0541  2D51               	goto	l1216
  3443  0542                     u840:
  3444  0542                     l1212:
  3445                           
  3446                           ;safe_sprintf.c: 47: --index;
  3447  0542  30FF               	movlw	255
  3448  0543  07AC               	addwf	safe_int_to_dec@index,f
  3449  0544  30FF               	movlw	255
  3450  0545  3DAD               	addwfc	safe_int_to_dec@index+1,f
  3451  0546                     l1214:
  3452                           
  3453                           ;safe_sprintf.c: 48: string1[index] = '-';
  3454  0546  302D               	movlw	45
  3455  0547  00FB               	movwf	??_safe_int_to_dec
  3456  0548  082C               	movf	safe_int_to_dec@index,w
  3457  0549  072E               	addwf	safe_int_to_dec@string1,w
  3458  054A  00FC               	movwf	??_safe_int_to_dec+1
  3459  054B  087C               	movf	??_safe_int_to_dec+1,w
  3460  054C  0086               	movwf	6
  3461  054D  3001               	movlw	1	; select bank2/3
  3462  054E  0087               	movwf	7
  3463  054F  087B               	movf	??_safe_int_to_dec,w
  3464  0550  0081               	movwf	1
  3465  0551                     l1216:
  3466                           
  3467                           ;safe_sprintf.c: 49: };safe_sprintf.c: 50: };safe_sprintf.c: 51: return status1;
  3468  0551  082A               	movf	safe_int_to_dec@status1,w
  3469  0552                     l48:
  3470  0552  0008               	return
  3471  0553                     __end_of_safe_int_to_dec:
  3472                           
  3473                           	psect	text10
  3474  0422                     __ptext10:	
  3475 ;; *************** function ___awmod *****************
  3476 ;; Defined at:
  3477 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;  divisor         2    0[COMMON] int 
  3480 ;;  dividend        2    2[COMMON] int 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  sign            1    6[COMMON] unsigned char 
  3483 ;;  counter         1    5[COMMON] unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  2    0[COMMON] int 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3493 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3495 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3496 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3497 ;;Total ram usage:        7 bytes
  3498 ;; Hardware stack levels used: 1
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_safe_int_to_dec
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           
  3507                           ;psect for function ___awmod
  3508  0422                     ___awmod:
  3509  0422                     l1148:	
  3510                           ;incstack = 0
  3511                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3512                           
  3513  0422  01F6               	clrf	___awmod@sign
  3514  0423                     l1150:
  3515  0423  1FF3               	btfss	___awmod@dividend+1,7
  3516  0424  2C26               	goto	u701
  3517  0425  2C27               	goto	u700
  3518  0426                     u701:
  3519  0426  2C2E               	goto	l1156
  3520  0427                     u700:
  3521  0427                     l1152:
  3522  0427  09F2               	comf	___awmod@dividend,f
  3523  0428  09F3               	comf	___awmod@dividend+1,f
  3524  0429  0AF2               	incf	___awmod@dividend,f
  3525  042A  1903               	skipnz
  3526  042B  0AF3               	incf	___awmod@dividend+1,f
  3527  042C                     l1154:
  3528  042C  01F6               	clrf	___awmod@sign
  3529  042D  0AF6               	incf	___awmod@sign,f
  3530  042E                     l1156:
  3531  042E  1FF1               	btfss	___awmod@divisor+1,7
  3532  042F  2C31               	goto	u711
  3533  0430  2C32               	goto	u710
  3534  0431                     u711:
  3535  0431  2C37               	goto	l1160
  3536  0432                     u710:
  3537  0432                     l1158:
  3538  0432  09F0               	comf	___awmod@divisor,f
  3539  0433  09F1               	comf	___awmod@divisor+1,f
  3540  0434  0AF0               	incf	___awmod@divisor,f
  3541  0435  1903               	skipnz
  3542  0436  0AF1               	incf	___awmod@divisor+1,f
  3543  0437                     l1160:
  3544  0437  0870               	movf	___awmod@divisor,w
  3545  0438  0471               	iorwf	___awmod@divisor+1,w
  3546  0439  1903               	btfsc	3,2
  3547  043A  2C3C               	goto	u721
  3548  043B  2C3D               	goto	u720
  3549  043C                     u721:
  3550  043C  2C66               	goto	l1178
  3551  043D                     u720:
  3552  043D                     l1162:
  3553  043D  01F5               	clrf	___awmod@counter
  3554  043E  0AF5               	incf	___awmod@counter,f
  3555  043F  2C49               	goto	l1168
  3556  0440                     l1164:
  3557  0440  3001               	movlw	1
  3558  0441                     u735:
  3559  0441  35F0               	lslf	___awmod@divisor,f
  3560  0442  0DF1               	rlf	___awmod@divisor+1,f
  3561  0443  0B89               	decfsz	9,f
  3562  0444  2C41               	goto	u735
  3563  0445                     l1166:
  3564  0445  3001               	movlw	1
  3565  0446  00F4               	movwf	??___awmod
  3566  0447  0874               	movf	??___awmod,w
  3567  0448  07F5               	addwf	___awmod@counter,f
  3568  0449                     l1168:
  3569  0449  1FF1               	btfss	___awmod@divisor+1,7
  3570  044A  2C4C               	goto	u741
  3571  044B  2C4D               	goto	u740
  3572  044C                     u741:
  3573  044C  2C40               	goto	l1164
  3574  044D                     u740:
  3575  044D                     l1170:
  3576  044D  0871               	movf	___awmod@divisor+1,w
  3577  044E  0273               	subwf	___awmod@dividend+1,w
  3578  044F  1D03               	skipz
  3579  0450  2C53               	goto	u755
  3580  0451  0870               	movf	___awmod@divisor,w
  3581  0452  0272               	subwf	___awmod@dividend,w
  3582  0453                     u755:
  3583  0453  1C03               	skipc
  3584  0454  2C56               	goto	u751
  3585  0455  2C57               	goto	u750
  3586  0456                     u751:
  3587  0456  2C5B               	goto	l1174
  3588  0457                     u750:
  3589  0457                     l1172:
  3590  0457  0870               	movf	___awmod@divisor,w
  3591  0458  02F2               	subwf	___awmod@dividend,f
  3592  0459  0871               	movf	___awmod@divisor+1,w
  3593  045A  3BF3               	subwfb	___awmod@dividend+1,f
  3594  045B                     l1174:
  3595  045B  3001               	movlw	1
  3596  045C                     u765:
  3597  045C  36F1               	lsrf	___awmod@divisor+1,f
  3598  045D  0CF0               	rrf	___awmod@divisor,f
  3599  045E  0B89               	decfsz	9,f
  3600  045F  2C5C               	goto	u765
  3601  0460                     l1176:
  3602  0460  3001               	movlw	1
  3603  0461  02F5               	subwf	___awmod@counter,f
  3604  0462  1D03               	btfss	3,2
  3605  0463  2C65               	goto	u771
  3606  0464  2C66               	goto	u770
  3607  0465                     u771:
  3608  0465  2C4D               	goto	l1170
  3609  0466                     u770:
  3610  0466                     l1178:
  3611  0466  0876               	movf	___awmod@sign,w
  3612  0467  1903               	btfsc	3,2
  3613  0468  2C6A               	goto	u781
  3614  0469  2C6B               	goto	u780
  3615  046A                     u781:
  3616  046A  2C70               	goto	l1182
  3617  046B                     u780:
  3618  046B                     l1180:
  3619  046B  09F2               	comf	___awmod@dividend,f
  3620  046C  09F3               	comf	___awmod@dividend+1,f
  3621  046D  0AF2               	incf	___awmod@dividend,f
  3622  046E  1903               	skipnz
  3623  046F  0AF3               	incf	___awmod@dividend+1,f
  3624  0470                     l1182:
  3625  0470  0873               	movf	___awmod@dividend+1,w
  3626  0471  00F1               	movwf	?___awmod+1
  3627  0472  0872               	movf	___awmod@dividend,w
  3628  0473  00F0               	movwf	?___awmod
  3629  0474                     l424:
  3630  0474  0008               	return
  3631  0475                     __end_of___awmod:
  3632                           
  3633                           	psect	text11
  3634  0475                     __ptext11:	
  3635 ;; *************** function ___awdiv *****************
  3636 ;; Defined at:
  3637 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;  divisor         2    6[COMMON] int 
  3640 ;;  dividend        2    8[COMMON] int 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  quotient        2    2[BANK0 ] int 
  3643 ;;  sign            1    1[BANK0 ] unsigned char 
  3644 ;;  counter         1    0[BANK0 ] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  2    6[COMMON] int 
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3655 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3656 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3657 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3658 ;;Total ram usage:        9 bytes
  3659 ;; Hardware stack levels used: 1
  3660 ;; This function calls:
  3661 ;;		Nothing
  3662 ;; This function is called by:
  3663 ;;		_main
  3664 ;;		_safe_int_to_dec
  3665 ;;		_safe_sprintf
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           
  3670                           ;psect for function ___awdiv
  3671  0475                     ___awdiv:
  3672  0475                     l1104:	
  3673                           ;incstack = 0
  3674                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3675                           
  3676  0475  0020               	movlb	0	; select bank0
  3677  0476  01A1               	clrf	___awdiv@sign
  3678  0477                     l1106:
  3679  0477  1FF7               	btfss	___awdiv@divisor+1,7
  3680  0478  2C7A               	goto	u601
  3681  0479  2C7B               	goto	u600
  3682  047A                     u601:
  3683  047A  2C82               	goto	l1112
  3684  047B                     u600:
  3685  047B                     l1108:
  3686  047B  09F6               	comf	___awdiv@divisor,f
  3687  047C  09F7               	comf	___awdiv@divisor+1,f
  3688  047D  0AF6               	incf	___awdiv@divisor,f
  3689  047E  1903               	skipnz
  3690  047F  0AF7               	incf	___awdiv@divisor+1,f
  3691  0480                     l1110:
  3692  0480  01A1               	clrf	___awdiv@sign
  3693  0481  0AA1               	incf	___awdiv@sign,f
  3694  0482                     l1112:
  3695  0482  1FF9               	btfss	___awdiv@dividend+1,7
  3696  0483  2C85               	goto	u611
  3697  0484  2C86               	goto	u610
  3698  0485                     u611:
  3699  0485  2C8F               	goto	l1118
  3700  0486                     u610:
  3701  0486                     l1114:
  3702  0486  09F8               	comf	___awdiv@dividend,f
  3703  0487  09F9               	comf	___awdiv@dividend+1,f
  3704  0488  0AF8               	incf	___awdiv@dividend,f
  3705  0489  1903               	skipnz
  3706  048A  0AF9               	incf	___awdiv@dividend+1,f
  3707  048B                     l1116:
  3708  048B  3001               	movlw	1
  3709  048C  00FA               	movwf	??___awdiv
  3710  048D  087A               	movf	??___awdiv,w
  3711  048E  06A1               	xorwf	___awdiv@sign,f
  3712  048F                     l1118:
  3713  048F  01A2               	clrf	___awdiv@quotient
  3714  0490  01A3               	clrf	___awdiv@quotient+1
  3715  0491                     l1120:
  3716  0491  0876               	movf	___awdiv@divisor,w
  3717  0492  0477               	iorwf	___awdiv@divisor+1,w
  3718  0493  1903               	btfsc	3,2
  3719  0494  2C96               	goto	u621
  3720  0495  2C97               	goto	u620
  3721  0496                     u621:
  3722  0496  2CC6               	goto	l1140
  3723  0497                     u620:
  3724  0497                     l1122:
  3725  0497  01A0               	clrf	___awdiv@counter
  3726  0498  0AA0               	incf	___awdiv@counter,f
  3727  0499  2CA3               	goto	l1128
  3728  049A                     l1124:
  3729  049A  3001               	movlw	1
  3730  049B                     u635:
  3731  049B  35F6               	lslf	___awdiv@divisor,f
  3732  049C  0DF7               	rlf	___awdiv@divisor+1,f
  3733  049D  0B89               	decfsz	9,f
  3734  049E  2C9B               	goto	u635
  3735  049F                     l1126:
  3736  049F  3001               	movlw	1
  3737  04A0  00FA               	movwf	??___awdiv
  3738  04A1  087A               	movf	??___awdiv,w
  3739  04A2  07A0               	addwf	___awdiv@counter,f
  3740  04A3                     l1128:
  3741  04A3  1FF7               	btfss	___awdiv@divisor+1,7
  3742  04A4  2CA6               	goto	u641
  3743  04A5  2CA7               	goto	u640
  3744  04A6                     u641:
  3745  04A6  2C9A               	goto	l1124
  3746  04A7                     u640:
  3747  04A7                     l1130:
  3748  04A7  3001               	movlw	1
  3749  04A8                     u655:
  3750  04A8  35A2               	lslf	___awdiv@quotient,f
  3751  04A9  0DA3               	rlf	___awdiv@quotient+1,f
  3752  04AA  0B89               	decfsz	9,f
  3753  04AB  2CA8               	goto	u655
  3754  04AC  0877               	movf	___awdiv@divisor+1,w
  3755  04AD  0279               	subwf	___awdiv@dividend+1,w
  3756  04AE  1D03               	skipz
  3757  04AF  2CB2               	goto	u665
  3758  04B0  0876               	movf	___awdiv@divisor,w
  3759  04B1  0278               	subwf	___awdiv@dividend,w
  3760  04B2                     u665:
  3761  04B2  1C03               	skipc
  3762  04B3  2CB5               	goto	u661
  3763  04B4  2CB6               	goto	u660
  3764  04B5                     u661:
  3765  04B5  2CBB               	goto	l1136
  3766  04B6                     u660:
  3767  04B6                     l1132:
  3768  04B6  0876               	movf	___awdiv@divisor,w
  3769  04B7  02F8               	subwf	___awdiv@dividend,f
  3770  04B8  0877               	movf	___awdiv@divisor+1,w
  3771  04B9  3BF9               	subwfb	___awdiv@dividend+1,f
  3772  04BA                     l1134:
  3773  04BA  1422               	bsf	___awdiv@quotient,0
  3774  04BB                     l1136:
  3775  04BB  3001               	movlw	1
  3776  04BC                     u675:
  3777  04BC  36F7               	lsrf	___awdiv@divisor+1,f
  3778  04BD  0CF6               	rrf	___awdiv@divisor,f
  3779  04BE  0B89               	decfsz	9,f
  3780  04BF  2CBC               	goto	u675
  3781  04C0                     l1138:
  3782  04C0  3001               	movlw	1
  3783  04C1  02A0               	subwf	___awdiv@counter,f
  3784  04C2  1D03               	btfss	3,2
  3785  04C3  2CC5               	goto	u681
  3786  04C4  2CC6               	goto	u680
  3787  04C5                     u681:
  3788  04C5  2CA7               	goto	l1130
  3789  04C6                     u680:
  3790  04C6                     l1140:
  3791  04C6  0821               	movf	___awdiv@sign,w
  3792  04C7  1903               	btfsc	3,2
  3793  04C8  2CCA               	goto	u691
  3794  04C9  2CCB               	goto	u690
  3795  04CA                     u691:
  3796  04CA  2CD0               	goto	l1144
  3797  04CB                     u690:
  3798  04CB                     l1142:
  3799  04CB  09A2               	comf	___awdiv@quotient,f
  3800  04CC  09A3               	comf	___awdiv@quotient+1,f
  3801  04CD  0AA2               	incf	___awdiv@quotient,f
  3802  04CE  1903               	skipnz
  3803  04CF  0AA3               	incf	___awdiv@quotient+1,f
  3804  04D0                     l1144:
  3805  04D0  0823               	movf	___awdiv@quotient+1,w
  3806  04D1  00F7               	movwf	?___awdiv+1
  3807  04D2  0822               	movf	___awdiv@quotient,w
  3808  04D3  00F6               	movwf	?___awdiv
  3809  04D4                     l411:
  3810  04D4  0008               	return
  3811  04D5                     __end_of___awdiv:
  3812                           
  3813                           	psect	text12
  3814  033B                     __ptext12:	
  3815 ;; *************** function ___wmul *****************
  3816 ;; Defined at:
  3817 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  multiplier      2    0[COMMON] unsigned int 
  3820 ;;  multiplicand    2    2[COMMON] unsigned int 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  product         2    4[COMMON] unsigned int 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  2    0[COMMON] unsigned int 
  3825 ;; Registers used:
  3826 ;;		wreg, status,2, status,0
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3832 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3835 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3836 ;;Total ram usage:        6 bytes
  3837 ;; Hardware stack levels used: 1
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_main
  3842 ;;		_safe_sprintf
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           
  3847                           ;psect for function ___wmul
  3848  033B                     ___wmul:
  3849  033B                     l1220:	
  3850                           ;incstack = 0
  3851                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3852                           
  3853  033B  01F4               	clrf	___wmul@product
  3854  033C  01F5               	clrf	___wmul@product+1
  3855  033D                     l1222:
  3856  033D  1C70               	btfss	___wmul@multiplier,0
  3857  033E  2B40               	goto	u851
  3858  033F  2B41               	goto	u850
  3859  0340                     u851:
  3860  0340  2B45               	goto	l258
  3861  0341                     u850:
  3862  0341                     l1224:
  3863  0341  0872               	movf	___wmul@multiplicand,w
  3864  0342  07F4               	addwf	___wmul@product,f
  3865  0343  0873               	movf	___wmul@multiplicand+1,w
  3866  0344  3DF5               	addwfc	___wmul@product+1,f
  3867  0345                     l258:
  3868  0345  3001               	movlw	1
  3869  0346                     u865:
  3870  0346  35F2               	lslf	___wmul@multiplicand,f
  3871  0347  0DF3               	rlf	___wmul@multiplicand+1,f
  3872  0348  0B89               	decfsz	9,f
  3873  0349  2B46               	goto	u865
  3874  034A                     l1226:
  3875  034A  3001               	movlw	1
  3876  034B                     u875:
  3877  034B  36F1               	lsrf	___wmul@multiplier+1,f
  3878  034C  0CF0               	rrf	___wmul@multiplier,f
  3879  034D  0B89               	decfsz	9,f
  3880  034E  2B4B               	goto	u875
  3881  034F                     l1228:
  3882  034F  0870               	movf	___wmul@multiplier,w
  3883  0350  0471               	iorwf	___wmul@multiplier+1,w
  3884  0351  1D03               	btfss	3,2
  3885  0352  2B54               	goto	u881
  3886  0353  2B55               	goto	u880
  3887  0354                     u881:
  3888  0354  2B3D               	goto	l1222
  3889  0355                     u880:
  3890  0355                     l1230:
  3891  0355  0875               	movf	___wmul@product+1,w
  3892  0356  00F1               	movwf	?___wmul+1
  3893  0357  0874               	movf	___wmul@product,w
  3894  0358  00F0               	movwf	?___wmul
  3895  0359                     l260:
  3896  0359  0008               	return
  3897  035A                     __end_of___wmul:
  3898                           
  3899                           	psect	text13
  3900  0309                     __ptext13:	
  3901 ;; *************** function ___bmul *****************
  3902 ;; Defined at:
  3903 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul8.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;  multiplier      1    wreg     unsigned char 
  3906 ;;  multiplicand    1    0[COMMON] unsigned char 
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;  multiplier      1    3[COMMON] unsigned char 
  3909 ;;  product         1    2[COMMON] unsigned char 
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      unsigned char 
  3912 ;; Registers used:
  3913 ;;		wreg, status,2, status,0
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3919 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3920 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3921 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3922 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3923 ;;Total ram usage:        4 bytes
  3924 ;; Hardware stack levels used: 1
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_safe_sprintf
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           
  3933                           ;psect for function ___bmul
  3934  0309                     ___bmul:
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3938                           ;___bmul@multiplier stored from wreg
  3939  0309  00F3               	movwf	___bmul@multiplier
  3940  030A                     l1234:
  3941  030A  01F2               	clrf	___bmul@product
  3942  030B                     l1236:
  3943  030B  1C73               	btfss	___bmul@multiplier,0
  3944  030C  2B0E               	goto	u891
  3945  030D  2B0F               	goto	u890
  3946  030E                     u891:
  3947  030E  2B13               	goto	l1240
  3948  030F                     u890:
  3949  030F                     l1238:
  3950  030F  0870               	movf	___bmul@multiplicand,w
  3951  0310  00F1               	movwf	??___bmul
  3952  0311  0871               	movf	??___bmul,w
  3953  0312  07F2               	addwf	___bmul@product,f
  3954  0313                     l1240:
  3955  0313  1003               	clrc
  3956  0314  0DF0               	rlf	___bmul@multiplicand,f
  3957  0315                     l1242:
  3958  0315  1003               	clrc
  3959  0316  0CF3               	rrf	___bmul@multiplier,f
  3960  0317  0873               	movf	___bmul@multiplier,w
  3961  0318  1D03               	btfss	3,2
  3962  0319  2B1B               	goto	u901
  3963  031A  2B1C               	goto	u900
  3964  031B                     u901:
  3965  031B  2B0B               	goto	l1236
  3966  031C                     u900:
  3967  031C                     l1244:
  3968  031C  0872               	movf	___bmul@product,w
  3969  031D                     l284:
  3970  031D  0008               	return
  3971  031E                     __end_of___bmul:
  3972                           
  3973                           	psect	text14
  3974  02FB                     __ptext14:	
  3975 ;; *************** function _safe_compress *****************
  3976 ;; Defined at:
  3977 ;;		line 6 in file "safe_compress.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  anArray1        1    wreg     PTR unsigned char 
  3980 ;;		 -> main@comp_msg(64), 
  3981 ;;  aString1        2    0[COMMON] PTR const unsigned char 
  3982 ;;		 -> main@msg(20), 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  anArray1        1    2[COMMON] PTR unsigned char 
  3985 ;;		 -> main@comp_msg(64), 
  3986 ;;  compress_sta    1    0        unsigned char 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  1    wreg      unsigned char 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3996 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3997 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3999 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4000 ;;Total ram usage:        3 bytes
  4001 ;; Hardware stack levels used: 1
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_main
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function _safe_compress
  4011  02FB                     _safe_compress:
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in _safe_compress: [wreg+status,2+status,0]
  4015                           ;safe_compress@anArray1 stored from wreg
  4016  02FB  00F2               	movwf	safe_compress@anArray1
  4017  02FC                     l1370:
  4018                           
  4019                           ;safe_compress.c: 7: bool compress_status;;safe_compress.c: 9: if ( (anArray1 == (uint8_
      +                          t*)0) || (aString1 == (char_t*)0) ) {
  4020  02FC  0872               	movf	safe_compress@anArray1,w
  4021  02FD  1903               	btfsc	3,2
  4022  02FE  2B00               	goto	u1081
  4023  02FF  2B01               	goto	u1080
  4024  0300                     u1081:
  4025  0300  2B07               	goto	l1374
  4026  0301                     u1080:
  4027  0301                     l1372:
  4028  0301  0870               	movf	safe_compress@aString1,w
  4029  0302  0471               	iorwf	safe_compress@aString1+1,w
  4030  0303  1D03               	btfss	3,2
  4031  0304  2B06               	goto	u1091
  4032  0305  2B07               	goto	u1090
  4033  0306                     u1091:
  4034  0306  2B08               	goto	l28
  4035  0307                     u1090:
  4036  0307                     l1374:
  4037                           
  4038                           ;safe_compress.c: 11: } else {
  4039  0307  2B08               	goto	l32
  4040  0308                     l28:
  4041  0308                     l32:
  4042  0308  0008               	return
  4043  0309                     __end_of_safe_compress:
  4044  007E                     btemp	set	126	;btemp
  4045  007E                     wtemp0	set	126

Data Sizes:
    Strings     34
    Constant    20
    Data        0
    BSS         64
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     71      71
    BANK1            80     64      64
    BANK2            80     64      64
    BANK3            80     64      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           80      0       0
    BANK24           80      0       0
    BANK25           32      0       0

Pointer List with Targets:

    safe_string_compare@aString2	PTR const unsigned char  size(1) Largest target is 64
		 -> main@exp_msg(BANK2[64]), 

    safe_string_compare@aString1	PTR const unsigned char  size(2) Largest target is 20
		 -> main@msg(CODE[20]), 

    safe_string_length@aString	PTR const unsigned char  size(2) Largest target is 20
		 -> main@msg(CODE[20]), 

    safe_sprintf4@format4	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), 

    safe_sprintf4@str4	PTR unsigned char  size(1) Largest target is 64
		 -> main@my_string(BANK3[64]), 

    safe_sprintf3@format3	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[12]), 

    safe_sprintf3@str3	PTR unsigned char  size(1) Largest target is 64
		 -> main@my_string(BANK3[64]), 

    safe_sprintf2@format2	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), 

    safe_sprintf2@str2	PTR unsigned char  size(1) Largest target is 64
		 -> main@my_string(BANK3[64]), 

    safe_sprintf1@format1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_9(CODE[3]), STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[3]), 

    safe_sprintf1@str1	PTR unsigned char  size(1) Largest target is 64
		 -> main@my_string(BANK3[64]), 

    safe_sprintf@string	PTR unsigned char  size(1) Largest target is 64
		 -> main@my_string(BANK3[64]), 

    safe_sprintf@format	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_9(CODE[3]), STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[3]), STR_3(CODE[8]), STR_2(CODE[12]), 
		 -> STR_1(CODE[16]), 

    safe_int_to_dec@string1	PTR unsigned char  size(1) Largest target is 64
		 -> main@my_string(BANK3[64]), 

    safe_uncompress@aString	PTR unsigned char  size(1) Largest target is 64
		 -> main@exp_msg(BANK2[64]), 

    safe_uncompress@anArray	PTR const unsigned char  size(1) Largest target is 64
		 -> main@comp_msg(BANK1[64]), 

    safe_compress@aString1	PTR const unsigned char  size(2) Largest target is 20
		 -> main@msg(CODE[20]), 

    safe_compress@anArray1	PTR unsigned char  size(1) Largest target is 64
		 -> main@comp_msg(BANK1[64]), 


Critical Paths under _main in COMMON

    _main->_safe_sprintf1
    _main->_safe_sprintf2
    _main->_safe_sprintf3
    _main->_safe_sprintf4
    _safe_sprintf->_safe_int_to_dec
    _safe_int_to_dec->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_safe_sprintf4
    _safe_sprintf4->_safe_sprintf
    _safe_sprintf3->_safe_sprintf
    _safe_sprintf2->_safe_sprintf
    _safe_sprintf1->_safe_sprintf
    _safe_sprintf->_safe_int_to_dec
    _safe_int_to_dec->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               197   197      0   30445
                                             66 BANK0      5     5      0
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___wmul
                      _safe_compress
                      _safe_sprintf1
                      _safe_sprintf2
                      _safe_sprintf3
                      _safe_sprintf4
                _safe_string_compare
                 _safe_string_length
                    _safe_uncompress
 ---------------------------------------------------------------------------------
 (1) _safe_uncompress                                      5     2      3     237
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _safe_string_length                                   5     3      2     166
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _safe_string_compare                                 10     5      5     485
                                              0 COMMON     9     4      5
 ---------------------------------------------------------------------------------
 (1) _safe_sprintf4                                       11     1     10    6838
                                             13 COMMON     1     1      0
                                             56 BANK0     10     0     10
                       _safe_sprintf
 ---------------------------------------------------------------------------------
 (1) _safe_sprintf3                                        9     1      8    6762
                                             13 COMMON     1     1      0
                                             56 BANK0      8     0      8
                       _safe_sprintf
 ---------------------------------------------------------------------------------
 (1) _safe_sprintf2                                        7     1      6    6686
                                             13 COMMON     1     1      0
                                             56 BANK0      6     0      6
                       _safe_sprintf
 ---------------------------------------------------------------------------------
 (1) _safe_sprintf1                                        5     1      4    7535
                                             13 COMMON     1     1      0
                                             56 BANK0      4     0      4
                       _safe_sprintf
 ---------------------------------------------------------------------------------
 (2) _safe_sprintf                                        39    27     12    6293
                                             17 BANK0     39    27     12
                            ___awdiv
                             ___bmul
                             ___wmul
                    _safe_int_to_dec
 ---------------------------------------------------------------------------------
 (3) _safe_int_to_dec                                     15    11      4    1752
                                             11 COMMON     2     2      0
                                              4 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     756
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     144
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _safe_compress                                        4     2      2     161
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _safe_compress
   _safe_sprintf1
     _safe_sprintf
       ___awdiv
       ___bmul
       ___wmul
       _safe_int_to_dec
         ___awdiv
         ___awmod
         ___bmul (ARG)
   _safe_sprintf2
     _safe_sprintf
   _safe_sprintf3
     _safe_sprintf
   _safe_sprintf4
     _safe_sprintf
   _safe_string_compare
   _safe_string_length
   _safe_uncompress

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     47      47       5       88.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     40      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0     155      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     155      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              50      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23              50      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24              50      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25              20      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Apr 12 11:20:38 2021

safe_string_compare@max_chars 0073                ___bmul@product 0072                            l32 0308  
                          l25 063F                            l35 02FA                            l28 0308  
                          l39 02FA                            l48 0552                            l72 07F4  
                          l81 03B6                            l75 0378                            l91 033A  
                          l84 03D5                            l78 0397                            l94 03E2  
                ___awdiv@sign 0021           ___wmul@multiplicand 0072             safe_sprintf1@str1 007D  
           safe_sprintf2@str2 007D             safe_sprintf3@str3 007D             safe_sprintf4@str4 007D  
                         l106 0421                           l411 04D4                           l260 0359  
                         l424 0474                           l258 0345                           l284 031D  
                         u600 047B                           u601 047A                           u610 0486  
                         u611 0485                           u620 0497                           u700 0427  
                         u621 0496                           u701 0426                           u710 0432  
                         u711 0431                           u640 04A7                           u720 043D  
                         u800 04EB                           u641 04A6                           u721 043C  
                         u801 04E9                           u810 04EC                           u635 049B  
                         u900 031C                           u660 04B6                           u740 044D  
                         u820 04F4                           u901 031B                           u661 04B5  
                         u741 044C                           u821 04F3                           u750 0457  
                         u830 053C                           u910 064D                           u655 04A8  
                         u751 0456                           u735 0441                           u831 053B  
                         u911 064C                           u680 04C6                           u840 0542  
                         u920 0652                           u681 04C5                           u665 04B2  
                         u841 0541                           u921 0651                           u850 0341  
                         u690 04CB                           u770 0466                           u930 067A  
                         u851 0340                           u691 04CA                           u675 04BC  
                         u771 0465                           u755 0453                           u835 0538  
                         u931 0679                           u780 046B                           u940 0687  
                         u781 046A                           u765 045C                           u941 0686  
                         u790 04DC                           u950 0699                           u791 04DB  
                         u951 0698                           u880 0355                           u960 06A6  
                         u881 0354                           u865 0346                           u961 06A5  
                         u945 0683                           u890 030F                           u970 06C4  
                         u891 030E                           u875 034B                           u971 06C3  
                         u980 06D1                           u981 06D0                           u995 06FE  
                ___awmod@sign 0076                           wreg 0009             safe_sprintf@digit 0042  
           safe_sprintf@count 004F             safe_sprintf@width 0051                          l1110 0480  
                        l1120 0491                          l1112 0482                          l1104 0475  
                        l1200 050C                          l1130 04A7                          l1122 0497  
                        l1114 0486                          l1106 0477                          l1210 053C  
                        l1202 0510                          l1220 033B                          l1132 04B6  
                        l1124 049A                          l1140 04C6                          l1116 048B  
                        l1108 047B                          l1212 0542                          l1204 0514  
                        l1300 0749                          l1230 0355                          l1222 033D  
                        l1142 04CB                          l1134 04BA                          l1126 049F  
                        l1118 048F                          l1150 0423                          l1214 0546  
                        l1206 051F                          l1310 078B                          l1302 074D  
                        l1240 0313                          l1224 0341                          l1144 04D0  
                        l1136 04BB                          l1128 04A3                          l1160 0437  
                        l1152 0427                          l1208 052F                          l1216 0551  
                        l1320 07BB                          l1312 0790                          l1304 0754  
                        l1400 040C                          l1242 0315                          l1234 030A  
                        l1226 034A                          l1138 04C0                          l1170 044D  
                        l1162 043D                          l1154 042C                          l1322 07BF  
                        l1314 07A0                          l1330 07DB                          l1306 0760  
                        l1250 0647                          l1410 055F                          l1244 031C  
                        l1236 030B                          l1228 034F                          l1180 046B  
                        l1172 0457                          l1164 0440                          l1156 042E  
                        l1148 0422                          l1332 07E0                          l1316 07A9  
                        l1308 0764                          l1324 07C1                          l1260 066E  
                        l1252 064D                          l1404 0418                          l1340 031E  
                        l1420 05B4                          l1412 0569                          l1238 030F  
                        l1182 0470                          l1174 045B                          l1166 0445  
                        l1158 0432                          l1190 04DE                          l1334 07EB  
                        l1326 07D3                          l1318 07B2                          l1270 0699  
                        l1262 067A                          l1254 0652                          l1406 041C  
                        l1350 0336                          l1342 0320                          l1430 05F9  
                        l1422 05C5                          l1414 0584                          l1176 0460  
                        l1168 0449                          l1192 04EF                          l1328 07D7  
                        l1280 06D1                          l1272 06A6                          l1264 0687  
                        l1336 07F3                          l1256 0654                          l1248 0643  
                        l1440 0630                          l1432 0606                          l1424 05D2  
                        l1416 0586                          l1408 0553                          l1370 02FC  
                        l1178 0466                          l1194 04F4                          l1186 04D7  
                        l1290 0717                          l1282 06E1                          l1274 06B3  
                        l1266 0687                          l1258 066C                          l1362 037A  
                        l1354 03B8                          l1346 0327                          l1434 0613  
                        l1426 05DF                          l1418 059F                          l1372 0301  
                        l1196 04F9                          l1188 04DC                          l1292 0728  
                        l1284 06F2                          l1276 06B7                          l1268 068C  
                        l1348 032B                          l1380 02F9                          l1436 061B  
                        l1428 05EC                          l1374 0307                          l1198 04FB  
                        l1294 072C                          l1278 06C4                          l1286 06F7  
                        l1366 035B                          l1358 0399                          l1390 03E4  
                        l1382 03D6                          l1438 0628                          l1296 073A  
                        l1288 06FB                          l1392 03E7                          l1384 03D6  
                        l1376 02EF                          l1298 0745                          l1394 03F5  
                        l1386 03DC                          l1378 02F4                          l1396 03F7  
                        l1388 03E1                          l1398 040A                          STR_1 0814  
                        STR_2 0818                          STR_3 081C                          STR_4 0830  
                        STR_5 0820                          STR_6 0828                          STR_7 0824  
                        STR_8 082C                          STR_9 0833                          u1000 0739  
                        u1001 0738                          u1010 0754                          u1011 0753  
                        u1020 0760                          u1100 02F4                          u1021 075F  
                        u1005 0735                          u1101 02F3                          u1110 02F9  
                        u1111 02F8                          u1040 07E0                          u1120 03DC  
                        u1041 07DF                          u1121 03DB                          u1050 07EB  
                        u1130 03E1                          u1051 07EA                          u1035 076B  
                        u1131 03E0                          u1140 03F5                          u1060 0326  
                        u1141 03F4                          u1061 0325                          u1150 040A  
                        u1070 0336                          u1151 0409                          u1071 0335  
                        u1080 0301                          u1160 0417                          u1081 0300  
                        u1161 0416                          u1145 03F1                          u1090 0307  
                        u1170 0421                          u1091 0306                          u1171 0420  
                        u1180 0566                   main@len_msg 0063                   main@exp_msg 0120  
                        _main 0553                          fsr0h 0005                          fsr1h 0007  
                        indf0 0000                          fsr0l 0004                          indf1 0001  
                        fsr1l 0006                          btemp 007E                          start 0002  
          safe_sprintf@aCount 0033             ___bmul@multiplier 0073      safe_uncompress@arraySize 0071  
          safe_sprintf@digits 004C            safe_sprintf@format 0031            safe_sprintf@string 0057  
                main@comp_msg 00A0                         ?_main 0070               __end_of___awdiv 04D5  
             __end_of___awmod 0475   __end_of_safe_string_compare 0422               ___awdiv@divisor 0076  
             ___awdiv@counter 0020      __size_of_safe_int_to_dec 007E          safe_int_to_dec@index 002C  
        safe_int_to_dec@value 002F                         status 0003                         wtemp0 007E  
             __end_ofmain@msg 0814                safe_sprintf@d1 0035                safe_sprintf@d2 0037  
              safe_sprintf@d3 0039                safe_sprintf@d4 003B               __initialization 07F5  
     safe_string_compare@loop 0076                  __end_of_main 0641          safe_sprintf1@format1 0058  
        safe_sprintf2@format2 0058                        ??_main 0062          safe_sprintf3@format3 0058  
        safe_sprintf4@format4 0058           safe_sprintf@status2 004E              ___awdiv@dividend 0078  
    __size_of_safe_uncompress 000D                        ___bmul 0309         safe_int_to_dec@aValue 0026  
                      ___wmul 033B                     ??___awdiv 007A                     ??___awmod 0074  
            ___awdiv@quotient 0022               ___awmod@divisor 0070         safe_int_to_dec@offset 0024  
             ___awmod@counter 0075   __size_of_safe_string_length 001D                 main@my_string 01A0  
               ?_safe_sprintf 0031             ??_safe_int_to_dec 007B       __end_of__initialization 07FD  
             safe_sprintf@max 004A        __size_of_safe_compress 000E           ___bmul@multiplicand 0070  
        safe_string_compare@i 0077                __pcstackCOMMON 0070                ??_safe_sprintf 003D  
      __size_of_safe_sprintf1 001F        __size_of_safe_sprintf2 001F        __size_of_safe_sprintf3 001F  
      __size_of_safe_sprintf4 001F                    __pbssBANK4 0220             ??_safe_uncompress 0073  
                  __pmaintext 0553                       ?___bmul 0070                       ?___wmul 0070  
               _safe_compress 02FB                 _safe_sprintf1 035A                 _safe_sprintf2 0379  
               _safe_sprintf3 0398                 _safe_sprintf4 03B7               __size_of___bmul 0015  
                     ___awdiv 0475                       ___awmod 0422               __size_of___wmul 001F  
                     __ptext1 02EE                       __ptext2 031E                       __ptext3 03D6  
                     __ptext4 03B7                       __ptext5 0398                       __ptext6 0379  
                     __ptext7 035A                       __ptext8 0641                       __ptext9 04D5  
              ?_safe_compress 0070              ___awmod@dividend 0072              main@len_comp_msg 0065  
                     main@msg 0800                       clrloop0 02E9  __size_of_safe_string_compare 004C  
        end_of_initialization 07FD        safe_int_to_dec@status1 002A        safe_int_to_dec@string1 002E  
              ?_safe_sprintf1 0058                ?_safe_sprintf2 0058                ?_safe_sprintf3 0058  
              ?_safe_sprintf4 0058          __end_of_safe_sprintf 07F5                    main@F11549 0220  
             _safe_int_to_dec 04D5        safe_uncompress@aString 0073        safe_uncompress@anArray 0070  
            safe_sprintf1@d11 005A              safe_sprintf2@d12 005A              safe_sprintf2@d22 005C  
            safe_sprintf3@d13 005A              safe_sprintf3@d23 005C              safe_sprintf3@d33 005E  
            safe_sprintf4@d14 005A              safe_sprintf4@d24 005C              safe_sprintf4@d34 005E  
            safe_sprintf4@d44 0060              safe_sprintf@ifmt 0055              safe_sprintf@istr 0053  
       safe_compress@aString1 0070         safe_compress@anArray1 0072            safe_int_to_dec@neg 002B  
              __end_of___bmul 031E                __end_of___wmul 035A    __end_of_safe_string_length 033B  
             ??_safe_compress 0072           start_initialization 07F5               _safe_uncompress 02EE  
             ??_safe_sprintf1 007D               ??_safe_sprintf2 007D               ??_safe_sprintf3 007D  
             ??_safe_sprintf4 007D                      ??___bmul 0071                      ??___wmul 0074  
     __end_of_safe_int_to_dec 0553     safe_string_length@aString 0070                     ___latbits 0003  
               __pcstackBANK0 0020                 __pcstackBANK1 00A0                 __pcstackBANK2 0120  
               __pcstackBANK3 01A0           safe_string_length@n 0073         __size_of_safe_sprintf 01B4  
 safe_string_compare@aString1 0070   safe_string_compare@aString2 0072                      ?___awdiv 0076  
                    ?___awmod 0070           _safe_string_compare 03D6       __end_of_safe_uncompress 02FB  
                _safe_sprintf 0641          ?_safe_string_compare 0070                ___wmul@product 0074  
                   clear_ram0 02E8      safe_int_to_dec@remainder 0028              ?_safe_int_to_dec 0024  
           ___wmul@multiplier 0070         ??_safe_string_compare 0075              __size_of___awdiv 0060  
            __size_of___awmod 0053              ?_safe_uncompress 0070                      __ptext10 0422  
                    __ptext11 0475                      __ptext12 033B                      __ptext13 0309  
                    __ptext14 02FB            _safe_string_length 031E                 __size_of_main 00EE  
         ?_safe_string_length 0070          ??_safe_string_length 0072         __end_of_safe_compress 0309  
       __end_of_safe_sprintf1 0379         __end_of_safe_sprintf2 0398         __end_of_safe_sprintf3 03B7  
       __end_of_safe_sprintf4 03D6                 __pstringtext1 0800                 __pstringtext2 0824  
               __pstringtext3 0828                 __pstringtext4 082C                 __pstringtext5 0830  
               __pstringtext6 0833                 __pstringtext7 0000  
